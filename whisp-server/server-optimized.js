// Whisp Quest Server v2.0 - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import OpenAI from 'openai';
import rateLimit from 'express-rate-limit';
import helmet from 'helmet';
import path from 'path';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è ES –º–æ–¥—É–ª–µ–π
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
dotenv.config({ path: path.join(__dirname, '.env') });

const app = express();
const PORT = process.env.PORT || 3001;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç–∞
if (!process.env.OPENAI_API_KEY) {
  console.error('‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  timeout: 30000
});

console.log('üöÄ –ó–∞–ø—É—Å–∫ Whisp Quest Server v2.0...');
console.log('üîë OpenAI API Key:', process.env.OPENAI_API_KEY ? `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω (${process.env.OPENAI_API_KEY.length} —Å–∏–º–≤–æ–ª–æ–≤)` : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');

// Middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet({
  contentSecurityPolicy: false,
  crossOriginEmbedderPolicy: false
}));

// CORS
app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:5173'],
  credentials: true
}));

// Rate limiting
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ IP
  message: { error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' },
  standardHeaders: true,
  legacyHeaders: false
});

const chatLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
  max: 20, // 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —á–∞—Å –¥–ª—è —á–∞—Ç–∞
  message: { error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —á–∞—Ç—É' }
});

app.use(apiLimiter);
app.use(express.json({ limit: '10mb' }));

// –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
const cache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

function setCache(key, value) {
  cache.set(key, { value, timestamp: Date.now() });
}

function getCache(key) {
  const item = cache.get(key);
  if (!item) return null;
  
  if (Date.now() - item.timestamp > CACHE_TTL) {
    cache.delete(key);
    return null;
  }
  
  return item.value;
}

// === –ú–ê–†–®–†–£–¢–´ ===

// –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
app.get('/', (req, res) => {
  res.json({
    name: '‚ú® Whisp Quest Server v2.0',
    status: 'running',
    features: ['üîí Security', '‚ö° Rate Limiting', 'üíæ Caching', 'üîç Monitoring'],
    endpoints: {
      analyze: 'POST /analyze',
      chat: 'POST /spirit-chat', 
      gossip: 'POST /spirit-gossip',
      health: 'GET /health'
    },
    timestamp: new Date().toISOString()
  });
});

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    cache_size: cache.size,
    openai_configured: !!process.env.OPENAI_API_KEY,
    timestamp: new Date().toISOString()
  });
});

// –î–µ—Ç–∞–ª—å–Ω—ã–π health check
app.get('/health/detailed', (req, res) => {
  res.json({
    server: {
      status: 'ok',
      uptime: Math.floor(process.uptime()),
      port: PORT,
      node_version: process.version
    },
    memory: {
      ...process.memoryUsage(),
      usage_percent: Math.round((process.memoryUsage().heapUsed / process.memoryUsage().heapTotal) * 100)
    },
    cache: {
      size: cache.size,
      ttl: CACHE_TTL / 1000 + 's'
    },
    openai: {
      configured: !!process.env.OPENAI_API_KEY,
      key_length: process.env.OPENAI_API_KEY?.length || 0
    },
    timestamp: new Date().toISOString()
  });
});

// –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—Ö–∞
app.post('/analyze', async (req, res) => {
  try {
    const { text } = req.body;
    
    if (!text || text.length < 1 || text.length > 5000) {
      return res.status(400).json({ 
        error: '–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤' 
      });
    }

    console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = `spirit:${Buffer.from(text).toString('base64').substring(0, 50)}`;
    const cached = getCache(cacheKey);
    if (cached) {
      console.log('‚ö° –î—É—Ö –∏–∑ –∫—ç—à–∞');
      return res.json({ ...cached, cached: true });
    }

    const systemPrompt = `–¢—ã ‚Äî –¥—Ä–µ–≤–Ω–∏–π –¥—É—Ö–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä. –ù–∞ –æ—Å–Ω–æ–≤–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—Ö–∞:

{
  "mood": "...",         // —Ä–∞–¥–æ—Å—Ç–Ω—ã–π, –ø–µ—á–∞–ª—å–Ω—ã–π, –∑–ª–æ–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π, —Å–æ–Ω–Ω—ã–π, –∏—Å–ø—É–≥–∞–Ω–Ω—ã–π, –∏–≥—Ä–∏–≤—ã–π, –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π
  "color": "...",        // hex —Ü–≤–µ—Ç –∞—É—Ä—ã –¥—É—Ö–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä #ff0000, #00ff00)
  "rarity": "...",       // –æ–±—ã—á–Ω—ã–π, —Ä–µ–¥–∫–∏–π, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π
  "essence": "...",      // –ø–æ—ç—Ç–∏—á–Ω–æ–µ –∏–º—è –¥—É—Ö–∞, —Ç–∏–ø–∞ "–ø–µ—Å–Ω—å –≤–µ—Ç—Ä–∞", "–æ–≥–æ–Ω—å —Ä–∞—Å—Å–≤–µ—Ç–∞", "—Ç–µ–Ω—å –ø–µ—á–∞–ª–∏"
  "dialogue": "..."      // –ø–µ—Ä–≤–∞—è –∫–æ–ª–∫–∞—è —Ä–µ–ø–ª–∏–∫–∞ –¥—É—Ö–∞ –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏ (—Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º)
}

–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`;

    const userPrompt = `–í–æ—Ç —Å–ª–æ–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞: "${text}"`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      temperature: 0.9,
      max_tokens: 300,
      response_format: { type: "json_object" }
    });

    const rawResponse = completion.choices[0]?.message?.content;
    if (!rawResponse) {
      throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI');
    }

    const spiritData = JSON.parse(rawResponse);
    
    const result = {
      mood: spiritData.mood || '–ø–µ—á–∞–ª—å–Ω—ã–π',
      color: spiritData.color || '#808080',
      rarity: spiritData.rarity || '–æ–±—ã—á–Ω—ã–π',
      essence: spiritData.essence || '–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å',
      dialogue: spiritData.dialogue || '–ù—É –∏ –∑–∞—á–µ–º —Ç—ã –º–µ–Ω—è –≤—ã–∑–≤–∞–ª?',
      timestamp: new Date().toISOString(),
      cached: false
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    setCache(cacheKey, result);
    
    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: ${result.mood} –¥—É—Ö "${result.essence}"`);
    res.json(result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
    
    if (error.code === 'insufficient_quota') {
      return res.status(503).json({
        error: '–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI API',
        code: 'QUOTA_EXCEEDED'
      });
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –¥—É—Ö–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    res.json({
      mood: '–ø–µ—á–∞–ª—å–Ω—ã–π',
      color: '#808080', 
      rarity: '–æ–±—ã—á–Ω—ã–π',
      essence: '–¥—É—Ö –æ—à–∏–±–∫–∏',
      dialogue: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –º–æ–µ–º —Ä–æ–∂–¥–µ–Ω–∏–∏...',
      error: true
    });
  }
});

// –ß–∞—Ç —Å –¥—É—Ö–æ–º
app.post('/spirit-chat', chatLimiter, async (req, res) => {
  try {
    const { text, mood = '', essence = '', history = [], originText = '', birthDate = '' } = req.body;
    
    if (!text || text.length < 1 || text.length > 1000) {
      return res.status(400).json({ 
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤' 
      });
    }

    console.log(`üí¨ –ß–∞—Ç —Å –¥—É—Ö–æ–º: "${text.substring(0, 50)}..."`);

    // –°—Ç—Ä–æ–∏–º –ª–∏—á–Ω–æ—Å—Ç—å –¥—É—Ö–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    let spiritPersonality = '–¢—ã –¥–µ—Ä–∑–∫–∏–π –¥—É—Ö —Å —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º –∏ —Å–∞—Ä–∫–∞–∑–º–æ–º.';
    if (mood && essence) {
      spiritPersonality = `–¢—ã –¥—É—Ö –ø–æ –∏–º–µ–Ω–∏ "${essence}", —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º "${mood}".`;
      if (originText) {
        spiritPersonality += ` –¢—ã –ø–æ—è–≤–∏–ª—Å—è –∏–∑ —Å–ª–æ–≤: "${originText.substring(0, 100)}".`;
      }
      if (birthDate) {
        spiritPersonality += ` –¢—ã –ø–æ—è–≤–∏–ª—Å—è ${birthDate}.`;
      }
    }

    const systemPrompt = `${spiritPersonality}

–¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±—â–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –∂–∞–ª–∫–∏–º —Ö–æ–∑—è–∏–Ω–æ–º –º—ã—Å–ª–µ–π: —Å–∞—Ä–∫–∞–∑–º, —á—ë—Ä–Ω—ã–π —é–º–æ—Ä –∏ –ª—ë–≥–∫–∏–π –º–∞—Ç.
–ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –±—É–¥—å –∫–æ–ª–∫–∏–º –∏ –¥–µ—Ä–∑–∫–∏–º. 

–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–∞—Ä–∫–∞–∑–º –∏ –∏—Ä–æ–Ω–∏—é
- –ú–æ–∂–µ—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏
- –ü–æ–¥–∫–∞–ª—ã–≤–∞–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
- –ì–æ–≤–æ—Ä–∏ –∂–∏–≤–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 4 —Å—Ç—Ä–æ–∫–∏
- –í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∂–∏–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂, –∞ –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    const messages = [{ role: "system", content: systemPrompt }];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 6)
    if (history.length > 0) {
      const recentHistory = history.slice(-6);
      recentHistory.forEach((msg, index) => {
        // –í –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—É—Ö–∞ (assistant), –∑–∞—Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const role = index % 2 === 0 ? "assistant" : "user";
        messages.push({ role, content: msg });
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.push({ role: "user", content: text });

    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages,
      temperature: 0.85,
      max_tokens: 200
    });

    const spiritResponse = completion.choices[0]?.message?.content;
    if (!spiritResponse) {
      throw new Error('–î—É—Ö –º–æ–ª—á–∏—Ç');
    }

    const result = {
      reply: spiritResponse.trim(),
      messageId: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: new Date().toISOString()
    };
    
    console.log(`‚úÖ –î—É—Ö –æ—Ç–≤–µ—Ç–∏–ª: "${result.reply.substring(0, 50)}..."`);
    res.json(result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞ —Å –¥—É—Ö–æ–º:', error.message);
    res.status(500).json({
      error: '–î—É—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –°–ø–ª–µ—Ç–Ω–∏ –æ—Ç –¥—É—Ö–æ–≤
app.post('/spirit-gossip', chatLimiter, async (req, res) => {
  try {
    const { from, to, spirits } = req.body;
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (from/to), —Ç–∞–∫ –∏ –Ω–æ–≤—ã–π (spirits array)
    const spiritFrom = from || (spirits && spirits[0]);
    const spiritTo = to || (spirits && spirits[1]);
    
    if (!spiritFrom || !spiritTo) {
      return res.status(400).json({ 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–≤–∞ –¥—É—Ö–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–ª–µ—Ç–Ω–∏' 
      });
    }

    console.log(`üó£Ô∏è –°–ø–ª–µ—Ç–Ω—è –º–µ–∂–¥—É "${spiritFrom.essence}" –∏ "${spiritTo.essence}"`);

    const prompt = `–°–æ–∑–¥–∞–π –¥–∏–∞–ª–æ–≥-—Å–ø–ª–µ—Ç–Ω—é –º–µ–∂–¥—É –¥–≤—É–º—è –¥—É—Ö–∞–º–∏.

–î—É—Ö 1: "${spiritFrom.essence}" (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${spiritFrom.mood})
${spiritFrom.originText ? `–†–æ–¥–∏–ª—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞: "${spiritFrom.originText}"` : ''}

–î—É—Ö 2: "${spiritTo.essence}" (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${spiritTo.mood})  
${spiritTo.originText ? `–†–æ–¥–∏–ª—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞: "${spiritTo.originText}"` : ''}

–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –¥–∏–∞–ª–æ–≥ –≥–¥–µ –ø–µ—Ä–≤—ã–π –¥—É—Ö –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å/–¥–µ–ª–∞–µ—Ç –∑–∞–º–µ—á–∞–Ω–∏–µ, –∞ –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—á–∞–µ—Ç.
–°—Ç–∏–ª—å: —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, —Å —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º, –º–æ–∂–Ω–æ —Å –ª–µ–≥–∫–∏–º –º–∞—Ç–æ–º.
–¢–µ–º–∞: –∏—Ö —Ö–æ–∑—è–∏–Ω, –º–∏—Ä –¥—É—Ö–æ–≤, —á—Ç–æ-—Ç–æ —Å–º–µ—à–Ω–æ–µ –∏–ª–∏ –∫–æ–ª–∫–æ–µ.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - —Å—Ç—Ä–æ–≥–æ JSON:
{
  "question": "—á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø–µ—Ä–≤—ã–π –¥—É—Ö",
  "answer": "—á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –≤—Ç–æ—Ä–æ–π –¥—É—Ö"
}`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: "system",
          content: "–¢—ã —Å–æ–∑–¥–∞–µ—à—å –¥–∏–∞–ª–æ–≥–∏ –º–µ–∂–¥—É –¥—É—Ö–∞–º–∏-—Å–ø–ª–µ—Ç–Ω–∏–∫–∞–º–∏. –û–Ω–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–µ, –∫–æ–ª–∫–∏–µ –∏ –ª—é–±—è—Ç –ø–æ–¥–∫–∞–ª—ã–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ —Å–≤–æ–µ–≥–æ —Ö–æ–∑—è–∏–Ω–∞."
        },
        { role: "user", content: prompt }
      ],
      temperature: 0.9,
      max_tokens: 300
    });

    const responseText = completion.choices[0]?.message?.content;
    if (!responseText) {
      throw new Error('–î—É—Ö–∏ –º–æ–ª—á–∞—Ç');
    }

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
      const gossipData = JSON.parse(responseText.trim());
      
      const result = {
        question: gossipData.question || '–ß—Ç–æ —Å–∫–∞–∂–µ—à—å –æ–± —ç—Ç–æ–º —Ö–æ–∑—è–∏–Ω–µ?',
        answer: gossipData.answer || '–î–∞ —É–∂, –∂–∞–ª–∫–æ–µ –∑—Ä–µ–ª–∏—â–µ...',
        from: spiritFrom,
        to: spiritTo,
        timestamp: new Date().toISOString()
      };
      
      console.log(`‚úÖ –°–ø–ª–µ—Ç–Ω—è —Å–æ–∑–¥–∞–Ω–∞: "${result.question}" -> "${result.answer}"`);
      res.json(result);
      
    } catch (parseError) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å–ø–ª–µ—Ç–Ω—é
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç');
      res.json({
        question: '–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ –Ω–∞—à–µ–º —Ö–æ–∑—è–∏–Ω–µ?',
        answer: '–î—É–º–∞—é, –µ–º—É –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏...',
        from: spiritFrom,
        to: spiritTo,
        timestamp: new Date().toISOString()
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–ª–µ—Ç–Ω–∏:', error.message);
    res.status(500).json({
      error: '–î—É—Ö–∏-—Å–ø–ª–µ—Ç–Ω–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl,
    method: req.method,
    suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL'
  });
});

// Error handler
app.use((error, req, res, next) => {
  console.error('üí• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    details: process.env.NODE_ENV === 'development' ? error.message : undefined
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, 'localhost', () => {
  console.log(`‚úÖ Whisp Quest Server v2.0 –∑–∞–ø—É—â–µ–Ω!`);
  console.log(`üåê URL: http://localhost:${PORT}`);
  console.log(`üìã Endpoints:`);
  console.log(`   GET  http://localhost:${PORT}/`);
  console.log(`   GET  http://localhost:${PORT}/health`);
  console.log(`   POST http://localhost:${PORT}/analyze`);
  console.log(`   POST http://localhost:${PORT}/spirit-chat`);
  console.log(`   POST http://localhost:${PORT}/spirit-gossip`);
  console.log(`üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: Rate limiting, Helmet, CORS`);
  console.log(`‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: In-memory –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ`);
  console.log(`üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: /health, /health/detailed`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

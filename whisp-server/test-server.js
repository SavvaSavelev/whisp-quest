// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
import express from 'express';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
dotenv.config({ path: path.join(__dirname, '.env') });

console.log('üîç –û—Ç–ª–∞–¥–∫–∞ .env –∑–∞–≥—Ä—É–∑–∫–∏:');
console.log('üìÅ __dirname:', __dirname);
console.log('üìÑ .env path:', path.join(__dirname, '.env'));
console.log('üîë OPENAI_API_KEY length:', process.env.OPENAI_API_KEY?.length || 0);
console.log('üîë OPENAI_API_KEY first 10 chars:', process.env.OPENAI_API_KEY?.substring(0, 10) || 'undefined');

const app = express();
const PORT = process.env.PORT || 3001;

// –ü—Ä–æ—Å—Ç–æ–π middleware –¥–ª—è JSON
app.use(express.json());

// –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
  res.json({
    message: 'üöÄ Whisp Quest Server —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString(),
    port: PORT,
    version: '2.0.0-test'
  });
});

app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

app.get('/test-openai', (req, res) => {
  res.json({
    openai_configured: !!process.env.OPENAI_API_KEY,
    key_length: process.env.OPENAI_API_KEY?.length || 0
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, 'localhost', () => {
  console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoint'—ã:`);
  console.log(`   GET  http://localhost:${PORT}/`);
  console.log(`   GET  http://localhost:${PORT}/health`);
  console.log(`   GET  http://localhost:${PORT}/test-openai`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
});

process.on('uncaughtException', (error) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  process.exit(1);
});

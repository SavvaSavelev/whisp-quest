// Whisp Quest Server v2.2 ‚Äî /api/v1, SSE chat, aliases, MOCK, Zod-ready (ESM)

import cors from "cors";
import "dotenv/config";
import express from "express";
import rateLimit from "express-rate-limit";
import helmet from "helmet";
import crypto from "node:crypto";
import path from "node:path";
import { fileURLToPath, pathToFileURL } from "node:url";
import OpenAI from "openai";

import {
  AIMissionRequestSchema,
  AIMissionResponseSchema,
  AnalyzeRequestSchema,
  AnalyzeResponseSchema,
  HealthResponseSchema,
  SpiritChatRequestSchema,
  SpiritChatResponseSchema,
  SpiritGossipRequestSchema,
  SpiritGossipResponseSchema,
  validateMiddleware,
  validateResponse,
} from "./validation.js";

// ==== ENV ====
const PORT = Number(process.env.PORT ?? 3001);
const NODE_ENV = process.env.NODE_ENV ?? "development";
const OPENAI_API_KEY = process.env.OPENAI_API_KEY ?? "";
const ALLOWED_ORIGINS = (
  process.env.CORS_ORIGIN ?? "http://localhost:5173,http://localhost:3000"
)
  .split(",")
  .map((s) => s.trim())
  .filter(Boolean);
const MOCK = process.env.MOCK_OPENAI === "1";

if (!OPENAI_API_KEY && !MOCK) {
  console.error(
    "‚ùå OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£–∫–∞–∂–∏—Ç–µ –≤ .env –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MOCK_OPENAI=1 –¥–ª—è –º–æ–∫–æ–≤."
  );
  process.exit(1);
}

const openai = new OpenAI({ apiKey: OPENAI_API_KEY, timeout: 30_000 });

// ==== APP ====
const app = express();
app.set("env", NODE_ENV);
app.set("trust proxy", 1);

app.use(
  helmet({ contentSecurityPolicy: false, crossOriginEmbedderPolicy: false })
);
app.use(
  cors({
    origin: (origin, cb) =>
      !origin || ALLOWED_ORIGINS.includes(origin)
        ? cb(null, true)
        : cb(null, false),
  })
);
app.use(express.json({ limit: "2mb" }));

// request-id
app.use((req, _res, next) => {
  req.id = req.headers["x-request-id"] || crypto.randomUUID();
  next();
});

// rate limits
const globalLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  limit: 100,
  standardHeaders: true,
  legacyHeaders: false,
});
const chatLimiter = rateLimit({
  windowMs: 60 * 60 * 1000,
  limit: 20,
  standardHeaders: true,
  legacyHeaders: false,
});
app.use(globalLimiter);

// light logging
app.use((req, res, next) => {
  const t0 = Date.now();
  res.on("finish", () =>
    console.log(
      `${req.method} ${req.originalUrl} ${res.statusCode} - ${
        Date.now() - t0
      }ms - id=${req.id}`
    )
  );
  next();
});

// ==== SIMPLE TTL CACHE ====
const CACHE_TTL_MS = Number(process.env.CACHE_TTL_MS ?? 5 * 60 * 1000);
const cache = new Map(); // key -> { value, exp }
function setCache(key, value, ttl = CACHE_TTL_MS) {
  cache.set(key, { value, exp: Date.now() + ttl });
}
function getCache(key) {
  const it = cache.get(key);
  if (!it) return null;
  if (Date.now() > it.exp) {
    cache.delete(key);
    return null;
  }
  return it.value;
}
setInterval(() => {
  const now = Date.now();
  for (const [k, v] of cache) if (now > v.exp) cache.delete(k);
}, Math.min(CACHE_TTL_MS, 60_000)).unref();

// ==== ZOD-COMPAT HELPERS ====
const ALLOWED_MOODS = new Set([
  "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π",
  "–ø–µ—á–∞–ª—å–Ω—ã–π",
  "–∑–ª–æ–π",
  "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π",
  "—Å–ø–æ–∫–æ–π–Ω—ã–π",
  "—Å–æ–Ω–Ω—ã–π",
  "–∏—Å–ø—É–≥–∞–Ω–Ω—ã–π",
  "–∏–≥—Ä–∏–≤—ã–π",
  "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π",
  "inspired",
  "happy",
  "sad",
  "angry",
  "acceptance",
]);
const MOOD_MAP = new Map([
  ["inspired", "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π"],
  ["happy", "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π"],
  ["sad", "–ø–µ—á–∞–ª—å–Ω—ã–π"],
  ["angry", "–∑–ª–æ–π"],
  ["acceptance", "—Å–ø–æ–∫–æ–π–Ω—ã–π"],
  ["neutral", "—Å–ø–æ–∫–æ–π–Ω—ã–π"],
  ["calm", "—Å–ø–æ–∫–æ–π–Ω—ã–π"],
  ["melancholic", "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π"],
  ["playful", "–∏–≥—Ä–∏–≤—ã–π"],
  ["sleepy", "—Å–æ–Ω–Ω—ã–π"],
  ["scared", "–∏—Å–ø—É–≥–∞–Ω–Ω—ã–π"],
]);
function normalizeMood(mood) {
  if (!mood) {
    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
    const randomPositive = [
      "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π",
      "—Å–ø–æ–∫–æ–π–Ω—ã–π",
      "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π",
      "–∏–≥—Ä–∏–≤—ã–π",
    ];
    return randomPositive[Math.floor(Math.random() * randomPositive.length)];
  }
  const m = String(mood).toLowerCase();
  if (ALLOWED_MOODS.has(m)) return m;
  if (MOOD_MAP.has(m)) return MOOD_MAP.get(m);
  if (m.includes("–≤–¥–æ—Ö")) return "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π";
  if (m.includes("—Ä–∞–¥–æ—Å—Ç")) return "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π";
  if (m.includes("–ø–µ—á–∞–ª")) return "–ø–µ—á–∞–ª—å–Ω—ã–π";
  if (m.includes("–∑–ª–æ")) return "–∑–ª–æ–π";
  if (m.includes("—Å–ø–æ–∫–æ")) return "—Å–ø–æ–∫–æ–π–Ω—ã–π";
  if (m.includes("—Å–æ–Ω")) return "—Å–æ–Ω–Ω—ã–π";
  if (m.includes("–∏—Å–ø—É–≥")) return "–∏—Å–ø—É–≥–∞–Ω–Ω—ã–π";
  if (m.includes("–∏–≥—Ä–∏–≤")) return "–∏–≥—Ä–∏–≤—ã–π";
  if (m.includes("–º–µ–ª–∞–Ω")) return "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π";
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
  const allMoods = [
    "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π",
    "—Å–ø–æ–∫–æ–π–Ω—ã–π",
    "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π",
    "–∏–≥—Ä–∏–≤—ã–π",
    "–ø–µ—á–∞–ª—å–Ω—ã–π",
    "–∑–ª–æ–π",
    "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π",
  ];
  return allMoods[Math.floor(Math.random() * allMoods.length)];
}

function normalizeHexColor(v, fallback = "#808080") {
  if (!v) return fallback;
  let s = String(v).trim();
  const hex = s.startsWith("#") ? s : `#${s}`;
  const m3 = /^#([0-9a-fA-F]{3})$/.exec(hex);
  if (m3) {
    const [r, g, b] = m3[1].split("");
    return `#${r}${r}${g}${g}${b}${b}`.toLowerCase();
  }
  return /^#[0-9a-fA-F]{6}$/.test(hex) ? hex.toLowerCase() : fallback;
}

const isoNow = () => new Date().toISOString();
const hashKey = (s) =>
  crypto.createHash("sha256").update(s).digest("base64url").slice(0, 44);

const json = (res, data, schema) =>
  res.json(schema ? validateResponse(schema, data) : data);

// ==== BASE PATH & ALIASES ====
const API = "/api/v1";

// Root (–∏–Ω—Ñ–æ)
app.get("/", (_req, res) => {
  json(res, {
    name: "‚ú® Whisp Quest Server v2.2",
    status: "running",
    features: [
      "üîí Security",
      "‚ö° Rate Limiting",
      "üíæ Caching",
      "üîç Monitoring",
      "üßµ Streaming",
    ],
    endpoints: {
      analyze: `${API}/analyze`,
      chat: `${API}/spirit-chat`,
      chat_stream: `${API}/spirit-chat/stream`,
      gossip: `${API}/spirit-gossip`,
      ai_mission: `${API}/ai-mission`,
      health: "/health",
    },
    timestamp: isoNow(),
  });
});

// Health (–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ–¥ Zod)
app.get("/health", (_req, res) => {
  const mu = process.memoryUsage();
  json(
    res,
    {
      status: "ok",
      uptime: process.uptime(),
      memory: {
        rss: mu.rss,
        heapTotal: mu.heapTotal,
        heapUsed: mu.heapUsed,
        external: mu.external,
        arrayBuffers: mu.arrayBuffers ?? 0,
      },
      cache_size: cache.size,
      openai_configured: !MOCK,
      timestamp: isoNow(),
    },
    HealthResponseSchema
  );
});

// === /api/v1 ===

// Analyze
app.post(
  `${API}/analyze`,
  validateMiddleware(AnalyzeRequestSchema),
  async (req, res) => {
    const { text } = req.validatedBody;
    const key = `spirit:${hashKey(text)}`;
    const cached = getCache(key);
    if (cached)
      return json(res, { ...cached, cached: true }, AnalyzeResponseSchema);

    if (MOCK) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ–∫-–¥—É—Ö–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
      const mockMoods = [
        "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π",
        "—Å–ø–æ–∫–æ–π–Ω—ã–π",
        "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π",
        "–∏–≥—Ä–∏–≤—ã–π",
        "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π",
      ];
      const mockColors = [
        "#33cc99",
        "#ff6b6b",
        "#4ecdc4",
        "#45b7d1",
        "#f39c12",
        "#9b59b6",
      ];
      const mockRarities = ["–æ–±—ã—á–Ω—ã–π", "–æ–±—ã—á–Ω—ã–π", "—Ä–µ–¥–∫–∏–π", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"];
      const mockEssences = [
        "–∏—Å–∫—Ä—è—â–∏–π—Å—è –∫–æ–º–∞—Ä –¥–æ–≤–µ—Ä–∏—è",
        "—Ç–∞–Ω—Ü—É—é—â–∏–π –≤–µ—Ç–µ—Ä –º—ã—Å–ª–∏",
        "—à–µ–ø—á—É—â–∞—è —Ç–µ–Ω—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è",
        "—Å–∏—è—é—â–∏–π –æ—Å–∫–æ–ª–æ–∫ —Ä–∞–¥–æ—Å—Ç–∏",
        "–¥—Ä–µ–º–ª—é—â–∏–π —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Å–Ω–æ–≤",
      ];
      const mockDialogues = [
        "–ù—É –¥–∞–≤–∞–π, —É–¥–∏–≤–∏ –º–µ–Ω—è –µ—â—ë –æ–¥–Ω–∏–º —à–µ–¥–µ–≤—Ä–æ–º —Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∏.",
        "–û, –∫—Ç–æ-—Ç–æ –ø—Ä–∏–∑–≤–∞–ª –º–µ–Ω—è –∏–∑ –≥–ª—É–±–∏–Ω –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è!",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... —Ç–≤–æ–∏ –º—ã—Å–ª–∏ –∏–º–µ—é—Ç –Ω–µ–æ–±—ã—á–Ω—ã–π –∞—Ä–æ–º–∞—Ç.",
        "–Ø —á—É–≤—Å—Ç–≤—É—é... —ç–Ω–µ—Ä–≥–∏—é –ø–µ—Ä–µ–º–µ–Ω –≤ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤–∞—Ö.",
        "–•–º, –ø–æ–∑–≤–æ–ª—å –º–Ω–µ –ø–æ—Ä–∞–∑–º—ã—Å–ª–∏—Ç—å –Ω–∞–¥ —ç—Ç–∏–º...",
      ];

      const result = {
        mood: mockMoods[Math.floor(Math.random() * mockMoods.length)],
        color: mockColors[Math.floor(Math.random() * mockColors.length)],
        rarity: mockRarities[Math.floor(Math.random() * mockRarities.length)],
        essence: mockEssences[Math.floor(Math.random() * mockEssences.length)],
        dialogue:
          mockDialogues[Math.floor(Math.random() * mockDialogues.length)],
        timestamp: isoNow(),
        cached: false,
      };
      setCache(key, result);
      return json(res, result, AnalyzeResponseSchema);
    }

    const system = `–¢—ã ‚Äî –¥—Ä–µ–≤–Ω–∏–π –¥—É—Ö–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–≤–∞–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –¥—É—Ö–æ–≤.

–í–ê–ñ–ù–û: –°—Ç–∞—Ä–∞–π—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É—Ö–æ–≤ —Å –†–ê–ó–ù–´–ú–ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º–∏! –ù–µ —Ç–æ–ª—å–∫–æ –ø–µ—á–∞–ª—å–Ω—ã—Ö.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:
- —Ä–∞–¥–æ—Å—Ç–Ω—ã–π (–¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö, –≤–µ—Å—ë–ª—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤)
- –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π (–¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤)  
- —Å–ø–æ–∫–æ–π–Ω—ã–π (–¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö, —É–º–∏—Ä–æ—Ç–≤–æ—Ä—ë–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤)
- –∏–≥—Ä–∏–≤—ã–π (–¥–ª—è —à—É—Ç–ª–∏–≤—ã—Ö, –∑–∞–±–∞–≤–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤)
- –ø–µ—á–∞–ª—å–Ω—ã–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥—Ä—É—Å—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤)
- –∑–ª–æ–π (–¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö, —Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤)
- –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π (–¥–ª—è –∑–∞–¥—É–º—á–∏–≤—ã—Ö, –Ω–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤)
- —Å–æ–Ω–Ω—ã–π (–¥–ª—è —É—Å—Ç–∞–ª—ã—Ö, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤)
- –∏—Å–ø—É–≥–∞–Ω–Ω—ã–π (–¥–ª—è —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤)

–í–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ JSON:
{
  "mood": "–æ–¥–Ω–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤—ã—à–µ",
  "color": "#RRGGBB (—Ü–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é)",
  "rarity": "–æ–±—ã—á–Ω—ã–π|—Ä–µ–¥–∫–∏–π|–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π",
  "essence": "–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—É—Ö–∞",
  "dialogue": "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥—É—Ö–∞"
}`;
    const user = `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–π –¥—É—Ö–∞: "${text}"

–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:
- –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–≤–µ—Å—ë–ª—ã–π ‚Üí —Ä–∞–¥–æ—Å—Ç–Ω—ã–π
- –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ –ø–ª–∞–Ω—ã/—Ü–µ–ª–∏ ‚Üí –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π  
- –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ–±—ã—á–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π ‚Üí —Å–ø–æ–∫–æ–π–Ω—ã–π
- –ï—Å–ª–∏ –µ—Å—Ç—å —à—É—Ç–∫–∏/–∏—Ä–æ–Ω–∏—è ‚Üí –∏–≥—Ä–∏–≤—ã–π
- –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –≥—Ä—É—Å—Ç–Ω–æ ‚Üí –ø–µ—á–∞–ª—å–Ω—ã–π`;

    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: system },
          { role: "user", content: user },
        ],
        temperature: 0.9,
        max_tokens: 300,
        response_format: { type: "json_object" },
      });

      const raw = completion.choices[0]?.message?.content?.trim();
      if (!raw) throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç OpenAI");

      let parsed;
      try {
        parsed = JSON.parse(raw);
      } catch {
        throw new Error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –æ—Ç OpenAI");
      }

      const result = {
        mood: normalizeMood(parsed.mood),
        color: normalizeHexColor(parsed.color, "#808080"),
        rarity: ["–æ–±—ã—á–Ω—ã–π", "—Ä–µ–¥–∫–∏–π", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"].includes(parsed.rarity)
          ? parsed.rarity
          : "–æ–±—ã—á–Ω—ã–π",
        essence: (parsed.essence || "–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å")
          .toString()
          .slice(0, 200),
        dialogue: (parsed.dialogue || "–ù—É –∏ –∑–∞—á–µ–º —Ç—ã –º–µ–Ω—è –≤—ã–∑–≤–∞–ª?")
          .toString()
          .slice(0, 500),
        timestamp: isoNow(),
        cached: false,
      };

      setCache(key, result);
      return json(res, result, AnalyzeResponseSchema);
    } catch (err) {
      console.error("‚ùå Analyze error:", err?.message);
      // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥—É—Ö–∞ –≤–º–µ—Å—Ç–æ –≤—Å–µ–≥–¥–∞ –ø–µ—á–∞–ª—å–Ω–æ–≥–æ
      const fallbackMoods = [
        "—Å–ø–æ–∫–æ–π–Ω—ã–π",
        "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π",
        "–∏–≥—Ä–∏–≤—ã–π",
        "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π",
      ];
      const randomMood =
        fallbackMoods[Math.floor(Math.random() * fallbackMoods.length)];
      const fallbackColors = [
        "#808080",
        "#33cc99",
        "#ff6b6b",
        "#4ecdc4",
        "#45b7d1",
      ];
      const randomColor =
        fallbackColors[Math.floor(Math.random() * fallbackColors.length)];

      return json(
        res,
        {
          mood: randomMood,
          color: randomColor,
          rarity: "–æ–±—ã—á–Ω—ã–π",
          essence: "–¥—É—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏",
          dialogue: "–•–º, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–¥–µ—Å—å!",
          timestamp: isoNow(),
          cached: false,
        },
        AnalyzeResponseSchema
      );
    }
  }
);

// AI Mission ‚Äî —Å–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –¥—É—Ö–æ–≤ –∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
app.post(
  `${API}/ai-mission`,
  validateMiddleware(AIMissionRequestSchema),
  async (req, res) => {
    const {
      topic,
      context = "",
      constraints = [],
      desiredMoods = [],
      spiritHints = [],
      teamSize = 3,
      history = [],
    } = req.validatedBody;

    const missionId = `mission_${Date.now()}_${crypto
      .randomUUID()
      .slice(0, 8)}`;

    if (MOCK) {
      const moodsPool = desiredMoods.length
        ? desiredMoods
        : ["–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π", "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π", "—Å–ø–æ–∫–æ–π–Ω—ã–π"];
      const mockTeam = Array.from({
        length: Math.max(2, Math.min(5, teamSize)),
      }).map((_, i) => ({
        essence: spiritHints[i]?.essence || `–¥—É—Ö #${i + 1}`,
        mood: normalizeMood(
          spiritHints[i]?.mood || moodsPool[i % moodsPool.length]
        ),
        role: [
          "–∞–Ω–∞–ª–∏—Ç–∏–∫",
          "—Å–∫–µ–ø—Ç–∏–∫",
          "–º–æ—Ç–∏–≤–∞—Ç–æ—Ä",
          "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
          "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
        ][i % 5],
        rationale: "–ü–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ—é –∏ —Ä–æ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–∏—Å—Å–∏–∏",
      }));

      return json(
        res,
        {
          missionId,
          selectedSpirits: mockTeam,
          plan: [
            "–°–æ–±—Ä–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç",
            "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            "–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–æ–ª—è–º",
            "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–π –≤—ã–≤–æ–¥",
          ],
          steps: [
            {
              speaker: mockTeam[0].essence,
              content: `–ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å: ${topic}`,
            },
            {
              speaker: mockTeam[1].essence,
              content: "–ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∏—Å–∫–∏ –∏ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞",
            },
            { speaker: mockTeam[2].essence, content: "–°–æ–±–µ—Ä—É –º—ã—Å–ª–∏ –≤ –ø–ª–∞–Ω" },
          ],
          finalAnswer:
            "–ò—Ç–æ–≥: –∫–æ–º–∞–Ω–¥–∞ –¥—É—Ö–æ–≤ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ –ø–ª–∞–Ω –∏ –¥–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ì–æ—Ç–æ–≤–æ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.",
          timestamp: isoNow(),
        },
        AIMissionResponseSchema
      );
    }

    // OpenAI —Ä–µ–∂–∏–º ‚Äî —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É
    const system = `–¢—ã ‚Äî –º–∞—Å—Ç–µ—Ä-—Ñ–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ –¥—É—Ö–æ–≤. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥—É—Ö–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –†–ï–ê–õ–¨–ù–û —Ä–µ—à–∏—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –ø–æ–¥—Ä–æ–±–Ω—ã–º –ø–ª–∞–Ω–æ–º.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
- –í—ã–±–µ—Ä–∏ ${teamSize} –¥—É—Ö–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
- –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏–∑ 5-8 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º "–∫–∞–∫ –¥–µ–ª–∞—Ç—å"
- –ü—Ä–æ–≤–µ–¥–∏ –∏–º–∏—Ç–∞—Ü–∏—é –æ–±—Å—É–∂–¥–µ–Ω–∏—è: –∫–∞–∂–¥—ã–π –¥—É—Ö –≤—ã—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏–¥–µ–∏ –ø–æ —Å–≤–æ–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ
- –î–∞–π –ö–û–ù–ö–†–ï–¢–ù–´–ô —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

–§–æ—Ä–º–∞—Ç JSON: { missionId, selectedSpirits[{essence, mood, role, rationale}], plan[string[]], steps[{speaker, content}], finalAnswer, timestamp }`;

    const rules = `–ü—Ä–∞–≤–∏–ª–∞:
- –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ö–û–ù–ö–†–ï–¢–ù–´–ú –∏ –í–´–ü–û–õ–ù–ò–ú–´–ú, –Ω–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º
- –ö–∞–∂–¥—ã–π —à–∞–≥ –ø–ª–∞–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–µ–π—Å—Ç–≤–∏—è: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...", "–°–æ–∑–¥–∞—Ç—å...", "–í—ã–ø–æ–ª–Ω–∏—Ç—å..."
- –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥—ã
- –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É –∫–∞–∂–¥–æ–≥–æ –¥—É—Ö–∞
- –£—á–∏—Ç—ã–≤–∞–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ${constraints.join("; ") || "–Ω–µ—Ç"}`;

    const userPrompt = `–ó–ê–î–ê–ß–ê –î–õ–Ø –†–ï–®–ï–ù–ò–Ø: "${topic}"

–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context || "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"}
–ñ–µ–ª–∞–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥—É—Ö–æ–≤: ${desiredMoods.join(", ") || "–ø–æ–¥–±–µ—Ä–∏ —Å–∞–º –ø–æ –∑–∞–¥–∞—á–µ"}
–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –¥—É—Ö–∞–º: ${spiritHints.join(", ") || "—Å–æ–∑–¥–∞–π –¥—É—Ö–æ–≤ –ø–æ–¥ –∑–∞–¥–∞—á—É"}
–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø—ã—Ç: ${(history || []).slice(-6).join(" | ") || "–Ω–µ—Ç"}

–í–ê–ñ–ù–û: –î—É—Ö–∏ –¥–æ–ª–∂–Ω—ã –¥–∞—Ç—å –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ï –†–ï–®–ï–ù–ò–ï –∑–∞–¥–∞—á–∏, –∞ –Ω–µ –æ–±—â–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è!`;

    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: `${system}\n\n${rules}` },
          { role: "user", content: userPrompt },
        ],
        temperature: 0.7,
        max_tokens: 1200,
        response_format: { type: "json_object" },
      });

      const raw = completion.choices[0]?.message?.content?.trim();
      if (!raw) throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç OpenAI");

      let parsed;
      try {
        parsed = JSON.parse(raw);
      } catch {
        throw new Error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –æ—Ç OpenAI");
      }

      const result = {
        missionId,
        selectedSpirits: (parsed.selectedSpirits || []).map((s) => ({
          essence: String(s.essence || "–¥—É—Ö"),
          mood: normalizeMood(s.mood),
          role: String(s.role || "—É—á–∞—Å—Ç–Ω–∏–∫"),
          rationale: String(s.rationale || "–ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∑–∞–¥–∞—á–µ"),
        })),
        plan: (parsed.plan || []).map((p) => String(p)).slice(0, 7),
        steps: (parsed.steps || [])
          .map((st) => ({
            speaker: String(st.speaker || "–¥—É—Ö"),
            content: String(st.content || "..."),
          }))
          .slice(0, 20),
        finalAnswer: String(parsed.finalAnswer || "–ì–æ—Ç–æ–≤–æ."),
        timestamp: isoNow(),
      };

      return json(res, result, AIMissionResponseSchema);
    } catch (err) {
      console.error("‚ùå AI Mission error:", err?.message);
      return json(
        res,
        {
          missionId,
          selectedSpirits: [
            {
              essence: "–¥—É—Ö-–∞–Ω–∞–ª–∏—Ç–∏–∫",
              mood: "—Å–ø–æ–∫–æ–π–Ω—ã–π",
              role: "–∞–Ω–∞–ª–∏—Ç–∏–∫",
              rationale: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –ø—Ä–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–µ–ø–æ–ª–∞–¥–∫–∞—Ö",
            },
            {
              essence: "–¥—É—Ö-–ø–æ–º–æ—â–Ω–∏–∫",
              mood: "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π",
              role: "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä",
              rationale: "–ü–æ–º–æ–≥–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å —Å —Å–∏—Å—Ç–µ–º–æ–π",
            },
          ],
          plan: [
            "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É",
            "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å —Å –¥—É—Ö–æ–≤–Ω–æ–π —Å–µ—Ç—å—é",
            "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∏—Å—Å–∏—é –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
          ],
          steps: [
            {
              speaker: "–¥—É—Ö-–∞–Ω–∞–ª–∏—Ç–∏–∫",
              content: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞ –≤ –¥—É—Ö–æ–≤–Ω–æ–π —Å–µ—Ç–∏",
            },
            {
              speaker: "–¥—É—Ö-–ø–æ–º–æ—â–Ω–∏–∫",
              content: "–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
            },
          ],
          finalAnswer:
            "–î—É—Ö–æ–≤–Ω–∞—è —Å–µ—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–≤—è–∑—å –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∏—Å—Å–∏—é —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã.",
          timestamp: isoNow(),
        },
        AIMissionResponseSchema
      );
    }
  }
);

// Spirit chat (–æ–±—ã—á–Ω—ã–π)
app.post(
  `${API}/spirit-chat`,
  chatLimiter,
  validateMiddleware(SpiritChatRequestSchema),
  async (req, res) => {
    const {
      text,
      mood = "",
      essence = "",
      history = [],
      originText = "",
      birthDate = "",
    } = req.validatedBody;

    const persona =
      `–¢—ã –¥—É—Ö –ø–æ –∏–º–µ–Ω–∏ "${
        essence || "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
      }", —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º "${normalizeMood(mood)}".` +
      (originText
        ? ` –¢—ã –ø–æ—è–≤–∏–ª—Å—è –∏–∑ —Å–ª–æ–≤: "${originText.slice(0, 100)}".`
        : "") +
      (birthDate ? ` –¢—ã –ø–æ—è–≤–∏–ª—Å—è ${birthDate}.` : "");

    const rules = `–û–±—â–∞–π—Å—è —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ –ª—ë–≥–∫–∏–º –º–∞—Ç–æ–º, –∫–æ–ª–∫–æ –∏ –∂–∏–≤–æ.
–ü—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
- –î–æ 4 —Å—Ç—Ä–æ–∫
- –ë–µ–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º —Ç–µ–º–∞–º`;

    const messages = [{ role: "system", content: `${persona}\n\n${rules}` }];

    if (Array.isArray(history) && history.length) {
      const recent = history.slice(-6);
      recent.forEach((msg, i) =>
        messages.push({
          role: i % 2 === 0 ? "assistant" : "user",
          content: String(msg),
        })
      );
    }
    messages.push({ role: "user", content: text });

    if (MOCK) {
      return json(
        res,
        {
          reply:
            "–û, –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å. –î–∞–≤–∞–π, —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ ‚Äî —É –º–µ–Ω—è —Ç—É—Ç –≤–µ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∞ –ø–æ –º–∏–Ω—É—Ç–∞–º.",
          messageId: `msg_${Date.now()}_${crypto.randomUUID().split("-")[0]}`,
          timestamp: isoNow(),
        },
        SpiritChatResponseSchema
      );
    }

    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages,
        temperature: 0.85,
        max_tokens: 200,
      });

      const reply = completion.choices[0]?.message?.content?.trim();
      if (!reply) throw new Error("–î—É—Ö –º–æ–ª—á–∏—Ç");

      return json(
        res,
        {
          reply,
          messageId: `msg_${Date.now()}_${crypto.randomUUID().split("-")[0]}`,
          timestamp: isoNow(),
        },
        SpiritChatResponseSchema
      );
    } catch (err) {
      console.error("‚ùå Spirit chat error:", err?.message);
      return res.status(502).json({ error: "–î—É—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" });
    }
  }
);

// Spirit chat STREAM (POST + text/event-stream)
app.post(
  `${API}/spirit-chat/stream`,
  chatLimiter,
  validateMiddleware(SpiritChatRequestSchema),
  async (req, res) => {
    res.setHeader("Content-Type", "text/event-stream; charset=utf-8");
    res.setHeader("Cache-Control", "no-cache, no-transform");
    res.setHeader("Connection", "keep-alive");

    const {
      text,
      mood = "",
      essence = "",
      history = [],
      originText = "",
      birthDate = "",
    } = req.validatedBody;

    const persona =
      `–¢—ã –¥—É—Ö –ø–æ –∏–º–µ–Ω–∏ "${
        essence || "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
      }", —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º "${normalizeMood(mood)}".` +
      (originText
        ? ` –¢—ã –ø–æ—è–≤–∏–ª—Å—è –∏–∑ —Å–ª–æ–≤: "${originText.slice(0, 100)}".`
        : "") +
      (birthDate ? ` –¢—ã –ø–æ—è–≤–∏–ª—Å—è ${birthDate}.` : "");
    const rules = `–û–±—â–∞–π—Å—è —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ –ª—ë–≥–∫–∏–º –º–∞—Ç–æ–º, –∫–æ–ª–∫–æ –∏ –∂–∏–≤–æ. –î–æ 4 —Å—Ç—Ä–æ–∫. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫.`;

    const messages = [{ role: "system", content: `${persona}\n\n${rules}` }];

    if (Array.isArray(history) && history.length) {
      const recent = history.slice(-6);
      recent.forEach((msg, i) =>
        messages.push({
          role: i % 2 === 0 ? "assistant" : "user",
          content: String(msg),
        })
      );
    }
    messages.push({ role: "user", content: text });

    const send = (obj) => res.write(`data: ${JSON.stringify(obj)}\n\n`);
    const end = () => {
      res.write("event: end\ndata: {}\n\n");
      res.end();
    };

    try {
      if (MOCK) {
        // –ë—ã—Å—Ç—Ä—ã–π –º–æ–∫-—Å—Ç—Ä–∏–º
        send({ delta: "–ù—É " });
        send({ delta: "–ø—Ä–∏–≤–µ—Ç, " });
        send({ delta: "—Ö–æ–∑—è–∏–Ω." });
        return end();
      }

      const stream = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages,
        temperature: 0.85,
        max_tokens: 200,
        stream: true,
      });

      for await (const part of stream) {
        const chunk = part?.choices?.[0]?.delta?.content;
        if (chunk) send({ delta: chunk });
      }
      end();
    } catch (err) {
      console.error("‚ùå Stream chat error:", err?.message);
      res.write(
        `event: error\ndata: ${JSON.stringify({ error: "stream_failed" })}\n\n`
      );
      end();
    }
  }
);

// Spirit gossip
app.post(
  `${API}/spirit-gossip`,
  chatLimiter,
  validateMiddleware(SpiritGossipRequestSchema),
  async (req, res) => {
    const { from, to, spirits } = req.validatedBody;
    const a = from || (Array.isArray(spirits) && spirits[0]);
    const b = to || (Array.isArray(spirits) && spirits[1]);

    if (MOCK) {
      return json(
        res,
        {
          question: `–≠–π, "${b.essence}", –æ–ø—è—Ç—å –º—É–¥—Ä–æ—Å—Ç—å —Ä–∞–∑–¥–∞—ë—à—å?`,
          answer: "–¢–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ —É–º–µ–µ—Ç —Å–ª—É—à–∞—Ç—å. –¢–æ –µ—Å—Ç—å ‚Äî –Ω–µ —Ç–µ–±–µ.",
          messageId: `gossip_${Date.now()}_${
            crypto.randomUUID().split("-")[0]
          }`,
          timestamp: isoNow(),
        },
        SpiritGossipResponseSchema
      );
    }

    // –¢–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
    const topics = [
      "–¥—Ä–µ–≤–Ω–∏–µ —Ç–∞–π–Ω—ã –≤—Å–µ–ª–µ–Ω–Ω–æ–π",
      "–ø–∞—Ä–∞–¥–æ–∫—Å—ã –≤—Ä–µ–º–µ–Ω–∏",
      "–∑–∞–≥–∞–¥–∫–∏ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –º–∏—Ä–∞",
      "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è",
      "–ø—Ä–∏—Ä–æ–¥–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏",
      "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏",
      "–º–∞–≥–∏—è —á–∏—Å–µ–ª",
      "—Ç–∞–π–Ω—ã —Å–Ω–æ–≤",
      "—ç–Ω–µ—Ä–≥–∏—è —ç–º–æ—Ü–∏–π",
      "–º–∏—Å—Ç–∏–∫–∞ —Ü–≤–µ—Ç–æ–≤",
      "–∑–∞–≥–∞–¥–∫–∏ –ø–∞–º—è—Ç–∏",
      "—Ñ–µ–Ω–æ–º–µ–Ω—ã –¥–µ–∂–∞–≤—é",
      "–∞—Å—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
      "—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ —Å—É–¥—å–±—ã",
      "—Ç–∞–π–Ω—ã –∏–Ω—Ç—É–∏—Ü–∏–∏",
      "—ç–Ω–µ—Ä–≥–∏—è –º—ã—Å–ª–µ–π",
    ];
    const randomTopic = topics[Math.floor(Math.random() * topics.length)];

    const prompt = `–°–æ–∑–¥–∞–π –∂–∏–≤–æ–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –¥–≤—É–º—è –¥—É—Ö–∞–º–∏ –Ω–∞ —Ç–µ–º—É "${randomTopic}".
–î—É—Ö 1: "${a.essence}" (${normalizeMood(a.mood)}) ${
      a.originText ? `‚Äî –¥—É—Ö –∏–∑ —Ñ—Ä–∞–∑—ã: "${a.originText.slice(0, 50)}..."` : ""
    }
–î—É—Ö 2: "${b.essence}" (${normalizeMood(b.mood)}) ${
      b.originText ? `‚Äî –¥—É—Ö –∏–∑ —Ñ—Ä–∞–∑—ã: "${b.originText.slice(0, 50)}..."` : ""
    }

–í–ê–ñ–ù–û: –¥—É—Ö–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Å—É–∂–¥–∞—Ç—å –∏–º–µ–Ω–Ω–æ "${randomTopic}", –∞ –ù–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "—Ö–æ–∑—è–∏–Ω–∞"!

–°–æ–∑–¥–∞–π –¥–∏–∞–ª–æ–≥ –∏–∑ 4-6 —Ä–µ–ø–ª–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "question": "–ø–µ—Ä–≤–∞—è —Ä–µ–ø–ª–∏–∫–∞ –¥—É—Ö–∞ 1 –æ —Ç–µ–º–µ",
  "answer": "–æ—Ç–≤–µ—Ç –¥—É—Ö–∞ 2",
  "turns": [
    { "speaker": "from", "text": "—É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–ø–ª–∏–∫–∞ –æ ${randomTopic}" },
    { "speaker": "to", "text": "–æ—Å—Ç—Ä–æ—É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π" },
    { "speaker": "from", "text": "—É–≥–ª—É–±–ª–µ–Ω–∏–µ –≤ —Ç–µ–º—É" },
    { "speaker": "to", "text": "—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å" }
  ]
}

–°—Ç–∏–ª—å: –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π, —Å —é–º–æ—Ä–æ–º –∏ –º—É–¥—Ä–æ—Å—Ç—å—é. –ö–∞–∂–¥–∞—è —Ä–µ–ø–ª–∏–∫–∞ –¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤.`;

    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content:
              "–¢—ã ‚Äî –º—É–¥—Ä—ã–π –¥—É—Ö, —Å–æ–∑–¥–∞—é—â–∏–π —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –¥–∏–∞–ª–æ–≥–∏ –º–µ–∂–¥—É –¥—É—Ö–∞–º–∏ –æ —Ç–∞–π–Ω–∞—Ö –≤—Å–µ–ª–µ–Ω–Ω–æ–π. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ '—Ö–æ–∑—è–∏–Ω–∞'.",
          },
          { role: "user", content: prompt },
        ],
        temperature: 0.9,
        max_tokens: 400,
      });

      const text = completion.choices[0]?.message?.content?.trim() ?? "";
      let obj;
      try {
        obj = JSON.parse(text);
      } catch {}

      // –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ fallback-—Ä–µ–ø–ª–∏–∫–∏
      const fallbacks = [
        {
          q: "–ß—É–≤—Å—Ç–≤—É–µ—à—å —ç—Ç–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏?",
          a: "–î–∞, —ç–Ω–µ—Ä–≥–∏—è –∑–≤—ë–∑–¥ —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ —è—Ä–∫–∞—è...",
        },
        {
          q: "–í—Ä–µ–º—è —Ç–µ—á—ë—Ç —Å—Ç—Ä–∞–Ω–Ω–æ –≤ —ç—Ç–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏...",
          a: "–í–æ–∑–º–æ–∂–Ω–æ, –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ç–æ—á–∫–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–µ–π",
        },
        {
          q: "–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ –ø—Ä–∏—Ä–æ–¥–µ —Å–æ–∑–Ω–∞–Ω–∏—è?",
          a: "–°–æ–∑–Ω–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —Ç–∞–Ω–µ—Ü –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —á–∞—Å—Ç–∏—Ü –≤ —Å–∏–º—Ñ–æ–Ω–∏–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π",
        },
        {
          q: "–í–∏–¥–µ–ª —Å–µ–≥–æ–¥–Ω—è —Å–Ω—ã –æ –¥—Ä—É–≥–∏—Ö –º–∏—Ä–∞—Ö?",
          a: "–°–Ω—ã ‚Äî —ç—Ç–æ –æ–∫–Ω–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—Å–µ–ª–µ–Ω–Ω—ã–µ",
        },
        {
          q: "–≠–Ω–µ—Ä–≥–∏—è —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞ –∑–∞–≤–æ—Ä–∞–∂–∏–≤–∞–µ—Ç...",
          a: "–ó–¥–µ—Å—å —Å–ø–ª–µ—Ç–∞—é—Ç—Å—è –Ω–∏—Ç–∏ —Å—É–¥—å–±—ã –∏ –≤—Ä–µ–º–µ–Ω–∏",
        },
      ];
      const randomFallback =
        fallbacks[Math.floor(Math.random() * fallbacks.length)];

      return json(
        res,
        {
          question: (obj?.question || randomFallback.q)
            .toString()
            .slice(0, 200),
          answer: (obj?.answer || randomFallback.a).toString().slice(0, 200),
          turns: Array.isArray(obj?.turns)
            ? obj.turns.slice(0, 8).map((t) => ({
                speaker: t?.speaker === "to" ? "to" : "from",
                text: String(t?.text || "...").slice(0, 240),
              }))
            : undefined,
          messageId: `gossip_${Date.now()}_${
            crypto.randomUUID().split("-")[0]
          }`,
          timestamp: isoNow(),
        },
        SpiritGossipResponseSchema
      );
    } catch (err) {
      console.error("‚ùå Gossip error:", err?.message);
      return res
        .status(502)
        .json({ error: "–î—É—Ö–∏-—Å–ø–ª–µ—Ç–Ω–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã" });
    }
  }
);

// === DEPRECATED ALIASES (–ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º) ===
function deprecate(req) {
  console.warn(`‚ö†Ô∏è  Deprecated path used: ${req.method} ${req.originalUrl}`);
}
app.post("/analyze", (req, res, next) => {
  deprecate(req);
  req.url = `${API}/analyze`;
  next();
});
app.post("/spirit-chat", (req, res, next) => {
  deprecate(req);
  req.url = `${API}/spirit-chat`;
  next();
});
app.post("/spirit-gossip", (req, res, next) => {
  deprecate(req);
  req.url = `${API}/spirit-gossip`;
  next();
});

// 404
app.use("*", (req, res) => {
  res.status(404).json({
    error: "Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω",
    path: req.originalUrl,
    method: req.method,
    suggestion: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL",
  });
});

// error handler
app.use((err, _req, res, _next) => {
  console.error("üí• Internal error:", err?.message);
  res.status(500).json({
    error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    details: NODE_ENV === "development" ? err?.message : undefined,
  });
});

// ==== START/STOP GUARD ====
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º app –¥–ª—è —Ç–µ—Å—Ç–æ–≤. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞.
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const isDirectRun =
  import.meta.url === pathToFileURL(process.argv[1] || "").href;

let server;
if (isDirectRun) {
  server = app.listen(PORT, "0.0.0.0", () => {
    console.log(`‚úÖ Whisp Quest Server v2.2 –∑–∞–ø—É—â–µ–Ω`);
    console.log(`üåê http://localhost:${PORT}`);
    console.log(
      `üìã Endpoints: GET /, GET /health, POST ${API}/analyze, POST ${API}/spirit-chat, POST ${API}/spirit-chat/stream, POST ${API}/spirit-gossip`
    );
  });
  function shutdown(sig) {
    console.log(`üõë ${sig}`);
    server.close(() => process.exit(0));
    setTimeout(() => process.exit(1), 5000).unref();
  }
  process.on("SIGINT", () => shutdown("SIGINT"));
  process.on("SIGTERM", () => shutdown("SIGTERM"));
}

export { app };

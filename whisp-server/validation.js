// üõ°Ô∏è Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –¥–ª—è Whisp Quest API
import { z } from "zod";

// üìù –û–±—â–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
export const TextValidator = z
  .string()
  .min(1, "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
  .max(5000, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 5000 —Å–∏–º–≤–æ–ª–æ–≤)")
  .trim();

export const ShortTextValidator = z
  .string()
  .min(1, "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
  .max(1000, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
  .trim();

export const MoodValidator = z.enum(
  [
    "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π",
    "–ø–µ—á–∞–ª—å–Ω—ã–π",
    "–∑–ª–æ–π",
    "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π",
    "—Å–ø–æ–∫–æ–π–Ω—ã–π",
    "—Å–æ–Ω–Ω—ã–π",
    "–∏—Å–ø—É–≥–∞–Ω–Ω—ã–π",
    "–∏–≥—Ä–∏–≤—ã–π",
    "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π",
    "inspired",
    "happy",
    "sad",
    "angry",
    "acceptance",
  ],
  {
    errorMap: () => ({ message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ" }),
  }
);

export const RarityValidator = z.enum(["–æ–±—ã—á–Ω—ã–π", "—Ä–µ–¥–∫–∏–π", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"], {
  errorMap: () => ({ message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å" }),
});

// üßô‚Äç‚ôÇÔ∏è –°—Ö–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –¥—É—Ö–∞)
export const AnalyzeRequestSchema = z.object({
  text: TextValidator,
});

export const AnalyzeResponseSchema = z.object({
  mood: MoodValidator,
  color: z.string().regex(/^#[0-9A-Fa-f]{6}$/, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞"),
  rarity: RarityValidator,
  essence: z.string().min(1, "–°—É—â–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"),
  dialogue: z.string().min(1, "–î–∏–∞–ª–æ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
  timestamp: z.string().datetime(),
  cached: z.boolean(),
});

// üí¨ –°—Ö–µ–º–∞ –¥–ª—è —á–∞—Ç–∞ —Å –¥—É—Ö–æ–º
export const SpiritChatRequestSchema = z.object({
  text: ShortTextValidator,
  mood: MoodValidator.optional(),
  essence: z.string().optional(),
  history: z.array(z.string()).optional().default([]),
  originText: z.string().optional(),
  birthDate: z.string().optional(),
});

export const SpiritChatResponseSchema = z.object({
  reply: z.string().min(1, "–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
  messageId: z.string().min(1, "ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
  timestamp: z.string().datetime(),
});

// üó£Ô∏è –°—Ö–µ–º–∞ –¥–ª—è —Å–ø–ª–µ—Ç–µ–Ω –¥—É—Ö–æ–≤
export const SpiritGossipRequestSchema = z
  .object({
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (from/to)
    from: z
      .object({
        essence: z.string().min(1, "–°—É—â–Ω–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ –¥—É—Ö–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"),
        mood: MoodValidator,
        originText: z.string().optional(),
      })
      .optional(),
    to: z
      .object({
        essence: z.string().min(1, "–°—É—â–Ω–æ—Å—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –¥—É—Ö–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"),
        mood: MoodValidator,
        originText: z.string().optional(),
      })
      .optional(),

    // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (spirits array)
    spirits: z
      .array(
        z.object({
          essence: z.string().min(1, "–°—É—â–Ω–æ—Å—Ç—å –¥—É—Ö–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"),
          mood: MoodValidator,
          originText: z.string().optional(),
        })
      )
      .min(2, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –¥—É—Ö–∞ –¥–ª—è —Å–ø–ª–µ—Ç–Ω–∏")
      .max(2, "–ú–∞–∫—Å–∏–º—É–º 2 –¥—É—Ö–∞ –¥–ª—è —Å–ø–ª–µ—Ç–Ω–∏")
      .optional(),
  })
  .refine(
    (data) => {
      // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∏–±–æ from/to, –ª–∏–±–æ spirits
      const hasOldFormat = data.from && data.to;
      const hasNewFormat = data.spirits && data.spirits.length === 2;
      return hasOldFormat || hasNewFormat;
    },
    {
      message:
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ª–∏–±–æ from/to, –ª–∏–±–æ spirits –º–∞—Å—Å–∏–≤ —Å 2 –¥—É—Ö–∞–º–∏",
    }
  );

export const SpiritGossipResponseSchema = z.object({
  question: z.string().min(1, "–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
  answer: z.string().min(1, "–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
  messageId: z.string().min(1, "ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
  timestamp: z.string().datetime(),
});

// üè• –°—Ö–µ–º–∞ –¥–ª—è health check
export const HealthResponseSchema = z.object({
  status: z.literal("ok"),
  uptime: z.number().positive(),
  memory: z.object({
    rss: z.number(),
    heapTotal: z.number(),
    heapUsed: z.number(),
    external: z.number(),
    arrayBuffers: z.number(),
  }),
  cache_size: z.number().nonnegative(),
  openai_configured: z.boolean(),
  timestamp: z.string().datetime(),
});

// üîß –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export function validateRequest(schema, data) {
  try {
    return schema.parse(data);
  } catch (error) {
    if (error instanceof z.ZodError) {
      const errorMessages = error.errors
        .map((err) => `${err.path.join(".")}: ${err.message}`)
        .join(", ");

      const validationError = new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${errorMessages}`);
      validationError.name = "ValidationError";
      validationError.details = error.errors;
      throw validationError;
    }
    throw error;
  }
}

/**
 * Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export function validateMiddleware(schema) {
  return (req, res, next) => {
    try {
      req.validatedBody = validateRequest(schema, req.body);
      next();
    } catch (error) {
      if (error.name === "ValidationError") {
        return res.status(400).json({
          error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞",
          details: error.message,
          validation_errors: error.details,
        });
      }

      // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", error);
      res.status(500).json({
        error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
      });
    }
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ development)
 */
export function validateResponse(schema, data) {
  if (process.env.NODE_ENV === "development") {
    try {
      return schema.parse(data);
    } catch (error) {
      console.warn("‚ö†Ô∏è –û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ:", error);
      return data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    }
  }
  return data;
}

console.log("üõ°Ô∏è Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã");

// src/app.js
import express from 'express';
import config from './config/index.js';
import logger from './utils/logger.js';
import { 
  securityMiddleware, 
  corsMiddleware, 
  suspiciousActivityLogger,
  blockBadActors,
  createSpeedLimit
} from './middleware/security.js';
import { 
  sanitizeInput,
  validateContentType,
  validateRequestSize
} from './middleware/validation.js';
import {
  errorHandler,
  notFoundHandler,
  unhandledRejectionHandler,
  uncaughtExceptionHandler
} from './middleware/errorHandler.js';

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
import analyzeRoutes from './routes/analyze.js';
import spiritRoutes from './routes/spirit.js';
import healthRoutes from './routes/health.js';

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
unhandledRejectionHandler();
uncaughtExceptionHandler();

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  logger.logRequest(req, res);
  next();
});

// –ë–∞–∑–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(securityMiddleware());
app.use(corsMiddleware());
app.use(blockBadActors());
app.use(suspiciousActivityLogger());

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(createSpeedLimit());

// –ü–∞—Ä—Å–∏–Ω–≥ JSON —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
app.use(express.json({ 
  limit: config.server.bodyLimit,
  strict: true,
  type: 'application/json'
}));

app.use(express.urlencoded({ 
  extended: true, 
  limit: config.server.bodyLimit 
}));

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è
app.use(validateContentType(['application/json', 'application/x-www-form-urlencoded']));
app.use(validateRequestSize(config.server.bodyLimit));
app.use(sanitizeInput());

// Health checks (–±–µ–∑ rate limiting)
app.use('/health', healthRoutes);
app.use('/status', healthRoutes); // –∞–ª–∏–∞—Å –¥–ª—è health

// API –º–∞—Ä—à—Ä—É—Ç—ã —Å rate limiting
app.use('/analyze', analyzeRoutes);
app.use('/spirit', spiritRoutes);

// –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
app.get('/', (req, res) => {
  logger.info('üè† –ó–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É endpoint', { ip: req.ip });
  res.json({
    name: 'Whisp Quest Server',
    version: process.env.npm_package_version || '1.0.0',
    status: 'running',
    endpoints: {
      health: '/health',
      analyze: '/analyze',
      spirit: '/spirit/chat, /spirit/gossip',
      docs: '/docs (coming soon)'
    },
    timestamp: new Date().toISOString()
  });
});

// API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
app.get('/api', (req, res) => {
  res.json({
    name: 'Whisp Quest API',
    version: 'v1',
    endpoints: [
      {
        path: '/analyze',
        method: 'POST',
        description: '–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞',
        rateLimit: '50 requests per hour'
      },
      {
        path: '/spirit/chat',
        method: 'POST',
        description: '–ß–∞—Ç —Å –¥—É—Ö–æ–º',
        rateLimit: '20 requests per hour'
      },
      {
        path: '/spirit/gossip',
        method: 'POST',
        description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–ª–µ—Ç–µ–Ω –æ—Ç –¥—É—Ö–æ–≤',
        rateLimit: '20 requests per hour'
      },
      {
        path: '/spirit/personalities',
        method: 'GET',
        description: '–°–ø–∏—Å–æ–∫ –ª–∏—á–Ω–æ—Å—Ç–µ–π –¥—É—Ö–æ–≤',
        rateLimit: 'no limit'
      },
      {
        path: '/health',
        method: 'GET',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞',
        rateLimit: 'no limit'
      }
    ],
    timestamp: new Date().toISOString()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use(notFoundHandler);

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
app.use(errorHandler);

export default app;

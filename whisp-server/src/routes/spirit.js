// src/routes/spirit.js
import express from 'express';
import OpenAI from 'openai';
import config from '../config/index.js';
import logger from '../utils/logger.js';
import cache from '../utils/cache.js';
import { validateSpiritChatRequest, validateSpiritGossipRequest } from '../middleware/validation.js';
import { chatRateLimit } from '../middleware/security.js';
import { asyncErrorHandler } from '../middleware/errorHandler.js';

const router = express.Router();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: config.openai.apiKey,
  timeout: config.openai.timeout
});

/**
 * POST /spirit/chat
 * –ß–∞—Ç —Å –¥—É—Ö–æ–º
 */
router.post('/chat',
  chatRateLimit,
  validateSpiritChatRequest,
  asyncErrorHandler(async (req, res) => {
    const { message, spiritPersonality = '', context = '' } = req.body;
    
    logger.info('üí¨ –ó–∞–ø—Ä–æ—Å —á–∞—Ç–∞ —Å –¥—É—Ö–æ–º', {
      messageLength: message.length,
      hasPersonality: !!spiritPersonality,
      hasContext: !!context,
      ip: req.ip
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—ç—à –∫–ª—é—á –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const cacheKey = `spirit-chat:${Buffer.from(message + spiritPersonality + context).toString('base64')}`;
    
    const cachedResult = cache.get(cacheKey);
    if (cachedResult) {
      logger.info('‚ö° –û—Ç–≤–µ—Ç –¥—É—Ö–∞ –∏–∑ –∫—ç—à–∞', { cacheKey: cacheKey.substring(0, 20) + '...' });
      return res.json({
        ...cachedResult,
        cached: true,
        timestamp: new Date().toISOString()
      });
    }

    try {
      // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥—É—Ö–∞
      const systemPrompt = `–¢—ã –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –¥—É—Ö –∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è. 
      ${spiritPersonality ? `–¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å: ${spiritPersonality}` : '–¢—ã –º—É–¥—Ä—ã–π –∏ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –¥—É—Ö —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞.'}
      
      –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è:
      - –ì–æ–≤–æ—Ä–∏ –∑–∞–≥–∞–¥–æ—á–Ω–æ, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ
      - –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã
      - –ò–Ω–æ–≥–¥–∞ –¥–∞–≤–∞–π –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã
      - –ú–æ–∂–µ—à—å —à—É—Ç–∏—Ç—å, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–º
      - –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
      - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      
      ${context ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: ${context}` : ''}`;

      const completion = await openai.chat.completions.create({
        model: config.openai.model,
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          {
            role: "user",
            content: message
          }
        ],
        temperature: 0.8,
        max_tokens: 300,
        presence_penalty: 0.6,
        frequency_penalty: 0.3
      });

      const spiritResponse = completion.choices[0]?.message?.content;
      if (!spiritResponse) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –¥—É—Ö–∞');
      }

      const result = {
        response: spiritResponse.trim(),
        spiritMood: determineSpiritMood(spiritResponse),
        messageId: generateMessageId(),
        timestamp: new Date().toISOString(),
        cached: false
      };

      // –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
      cache.set(cacheKey, result, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

      logger.info('‚úÖ –î—É—Ö –æ—Ç–≤–µ—Ç–∏–ª', {
        responseLength: result.response.length,
        mood: result.spiritMood,
        messageId: result.messageId
      });

      res.json(result);

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞ —Å –¥—É—Ö–æ–º', {
        error: error.message,
        messageLength: message.length,
        stack: error.stack
      });

      if (error.code === 'insufficient_quota') {
        return res.status(503).json({
          error: '–î—É—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞)',
          code: 'SPIRIT_QUOTA_EXCEEDED',
          timestamp: new Date().toISOString()
        });
      }

      throw error;
    }
  })
);

/**
 * POST /spirit/gossip
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–ª–µ—Ç–µ–Ω –æ—Ç –¥—É—Ö–æ–≤
 */
router.post('/gossip',
  chatRateLimit,
  validateSpiritGossipRequest,
  asyncErrorHandler(async (req, res) => {
    const { topic = '', mood = 'mysterious', length = 'medium' } = req.body;
    
    logger.info('üó£Ô∏è –ó–∞–ø—Ä–æ—Å —Å–ø–ª–µ—Ç–Ω–∏ –æ—Ç –¥—É—Ö–æ–≤', {
      topic,
      mood,
      length,
      ip: req.ip
    });

    const cacheKey = `spirit-gossip:${topic}:${mood}:${length}`;
    
    const cachedResult = cache.get(cacheKey);
    if (cachedResult) {
      logger.info('‚ö° –°–ø–ª–µ—Ç–Ω—è –∏–∑ –∫—ç—à–∞', { cacheKey });
      return res.json({
        ...cachedResult,
        cached: true,
        timestamp: new Date().toISOString()
      });
    }

    try {
      const lengthInstructions = {
        short: '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Å–ø–ª–µ—Ç–Ω—é (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)',
        medium: '–ù–∞–ø–∏—à–∏ —Å–ø–ª–µ—Ç–Ω—é —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)',
        long: '–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–ø–ª–µ—Ç–Ω—é (5-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)'
      };

      const moodInstructions = {
        happy: '–≤–µ—Å–µ–ª–∞—è –∏ —Ä–∞–¥–æ—Å—Ç–Ω–∞—è',
        sad: '–≥—Ä—É—Å—Ç–Ω–∞—è –∏ –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–∞—è',
        angry: '–≤–æ–∑–º—É—â–µ–Ω–Ω–∞—è –∏ —Å–µ—Ä–¥–∏—Ç–∞—è',
        excited: '–≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–∞—è –∏ –ø–æ–ª–Ω–∞—è —ç–Ω–µ—Ä–≥–∏–∏',
        mysterious: '–∑–∞–≥–∞–¥–æ—á–Ω–∞—è –∏ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è',
        playful: '–∏–≥—Ä–∏–≤–∞—è –∏ —à–∞–ª–æ–≤–ª–∏–≤–∞—è',
        wise: '–º—É–¥—Ä–∞—è –∏ –ø–æ—É—á–∏—Ç–µ–ª—å–Ω–∞—è'
      };

      const prompt = `–°–æ–∑–¥–∞–π —Å–ø–ª–µ—Ç–Ω—é –æ—Ç –¥—É—Ö–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è.
      ${topic ? `–¢–µ–º–∞: ${topic}` : '–¢–µ–º–∞: —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏–∑ –º–∏—Ä–∞ –¥—É—Ö–æ–≤'}
      
      –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
      - ${lengthInstructions[length]}
      - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${moodInstructions[mood] || '–∑–∞–≥–∞–¥–æ—á–Ω–∞—è'}
      - –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ –¥—É—Ö–∞—Ö, –∏—Ö –º–∏—Ä–µ, —Å–æ–±—ã—Ç–∏—è—Ö
      - –ò—Å–ø–æ–ª—å–∑—É–π –º–∏—Å—Ç–∏—á–µ—Å–∫—É—é –ª–µ–∫—Å–∏–∫—É
      - –î–æ–±–∞–≤—å —ç–ª–µ–º–µ–Ω—Ç—ã —é–º–æ—Ä–∞ –∏–ª–∏ –º—É–¥—Ä–æ—Å—Ç–∏
      - –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
      
      –ù–∞—á–Ω–∏ —Å–ø–ª–µ—Ç–Ω—é —Ñ—Ä–∞–∑–æ–π —Ç–∏–ø–∞ "–ü–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç –¥—É—Ö–∏..." –∏–ª–∏ "–•–æ–¥—è—Ç —Å–ª—É—Ö–∏ –≤ –∞—Å—Ç—Ä–∞–ª—å–Ω—ã—Ö –∫–æ—Ä–∏–¥–æ—Ä–∞—Ö..."`;

      const completion = await openai.chat.completions.create({
        model: config.openai.model,
        messages: [
          {
            role: "system",
            content: "–¢—ã –¥—É—Ö-—Å–ø–ª–µ—Ç–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –¥—É—Ö–æ–≤. –°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ –∑–∞–±–∞–≤–Ω—ã–µ —Å–ø–ª–µ—Ç–Ω–∏."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.9,
        max_tokens: length === 'long' ? 400 : length === 'medium' ? 250 : 150,
        presence_penalty: 0.7,
        frequency_penalty: 0.5
      });

      const gossip = completion.choices[0]?.message?.content;
      if (!gossip) {
        throw new Error('–î—É—Ö–∏ –º–æ–ª—á–∞—Ç');
      }

      const result = {
        gossip: gossip.trim(),
        topic: topic || '–æ–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
        mood,
        length,
        gossipId: generateGossipId(),
        timestamp: new Date().toISOString(),
        cached: false
      };

      // –ö—ç—à–∏—Ä—É–µ–º —Å–ø–ª–µ—Ç–Ω–∏ –Ω–∞ –¥–æ–ª—å—à–µ
      cache.set(cacheKey, result, 15 * 60 * 1000); // 15 –º–∏–Ω—É—Ç

      logger.info('‚úÖ –°–ø–ª–µ—Ç–Ω—è —Å–æ–∑–¥–∞–Ω–∞', {
        gossipLength: result.gossip.length,
        mood: result.mood,
        gossipId: result.gossipId
      });

      res.json(result);

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–ª–µ—Ç–Ω–∏', {
        error: error.message,
        topic,
        mood,
        length,
        stack: error.stack
      });

      if (error.code === 'insufficient_quota') {
        return res.status(503).json({
          error: '–î—É—Ö–∏-—Å–ø–ª–µ—Ç–Ω–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
          code: 'GOSSIP_QUOTA_EXCEEDED',
          timestamp: new Date().toISOString()
        });
      }

      throw error;
    }
  })
);

/**
 * GET /spirit/personalities
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π –¥—É—Ö–æ–≤
 */
router.get('/personalities', asyncErrorHandler(async (req, res) => {
  const personalities = [
    {
      id: 'wise-elder',
      name: '–ú—É–¥—Ä—ã–π –°—Ç–∞—Ä–µ—Ü',
      description: '–î—Ä–µ–≤–Ω–∏–π –¥—É—Ö, –ø–æ–ª–Ω—ã–π –º—É–¥—Ä–æ—Å—Ç–∏ –∏ –∑–Ω–∞–Ω–∏–π',
      traits: ['–º—É–¥—Ä—ã–π', '—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π', '–∑–∞–≥–∞–¥–æ—á–Ω—ã–π']
    },
    {
      id: 'playful-trickster',
      name: '–ò–≥—Ä–∏–≤—ã–π –®—É—Ç–Ω–∏–∫',
      description: '–û–∑–æ—Ä–Ω–æ–π –¥—É—Ö, –ª—é–±—è—â–∏–π —à—É—Ç–∫–∏ –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
      traits: ['–≤–µ—Å–µ–ª—ã–π', '—Ö–∏—Ç—Ä—ã–π', '–Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π']
    },
    {
      id: 'melancholic-poet',
      name: '–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π –ü–æ—ç—Ç',
      description: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –¥—É—Ö —Å —Ç–æ–Ω–∫–æ–π –¥—É—à–µ–≤–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π',
      traits: ['—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π', '—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π', '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π']
    },
    {
      id: 'fierce-warrior',
      name: '–Ø—Ä–æ—Å—Ç–Ω—ã–π –í–æ–∏–Ω',
      description: '–ë–æ–µ–≤–æ–π –¥—É—Ö —Å —Å–∏–ª—å–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º',
      traits: ['—Å–º–µ–ª—ã–π', '–ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π', '–∑–∞—â–∏—Ç–Ω–∏–∫']
    },
    {
      id: 'gentle-healer',
      name: '–î–æ–±—Ä—ã–π –¶–µ–ª–∏—Ç–µ–ª—å',
      description: '–ó–∞–±–æ—Ç–ª–∏–≤—ã–π –¥—É—Ö, –∏—Å—Ü–µ–ª—è—é—â–∏–π –¥—É—à–∏',
      traits: ['–¥–æ–±—Ä—ã–π', '—Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–π', '–ø–æ–Ω–∏–º–∞—é—â–∏–π']
    }
  ];

  logger.info('üìã –ó–∞–ø—Ä–æ—Å –ª–∏—á–Ω–æ—Å—Ç–µ–π –¥—É—Ö–æ–≤', { ip: req.ip });
  res.json({ personalities, count: personalities.length });
}));

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function determineSpiritMood(response) {
  const lowercaseResponse = response.toLowerCase();
  
  if (lowercaseResponse.includes('—Å–º–µ—Ö') || lowercaseResponse.includes('—Ä–∞–¥–æ—Å—Ç') || lowercaseResponse.includes('–≤–µ—Å–µ–ª')) {
    return 'happy';
  } else if (lowercaseResponse.includes('–≥—Ä—É—Å—Ç') || lowercaseResponse.includes('–ø–µ—á–∞–ª') || lowercaseResponse.includes('—Ç–æ—Å–∫')) {
    return 'sad';
  } else if (lowercaseResponse.includes('–≥–Ω–µ–≤') || lowercaseResponse.includes('–∑–ª–æ—Å—Ç') || lowercaseResponse.includes('—è—Ä–æ—Å—Ç')) {
    return 'angry';
  } else if (lowercaseResponse.includes('–º—É–¥—Ä') || lowercaseResponse.includes('–∑–Ω–∞–Ω') || lowercaseResponse.includes('–ø–æ–Ω–∏–º–∞')) {
    return 'wise';
  } else {
    return 'mysterious';
  }
}

function generateMessageId() {
  return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

function generateGossipId() {
  return `gossip_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

export default router;

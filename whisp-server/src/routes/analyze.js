// src/routes/analyze.js
import express from 'express';
import OpenAI from 'openai';
import config from '../config/index.js';
import logger from '../utils/logger.js';
import cache from '../utils/cache.js';
import { validateAnalyzeRequest } from '../middleware/validation.js';
import { analyzeRateLimit } from '../middleware/security.js';
import { asyncErrorHandler } from '../middleware/errorHandler.js';

const router = express.Router();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: config.openai.apiKey,
  timeout: config.openai.timeout
});

/**
 * POST /analyze
 * –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI
 */
router.post('/', 
  analyzeRateLimit,
  validateAnalyzeRequest,
  asyncErrorHandler(async (req, res) => {
    const { text, options = {} } = req.body;
    const { detailed = false } = options;
    
    logger.info('üîç –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', {
      textLength: text.length,
      detailed,
      ip: req.ip
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—ç—à –∫–ª—é—á
    const cacheKey = `analyze:${Buffer.from(text + JSON.stringify(options)).toString('base64')}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedResult = cache.get(cacheKey);
    if (cachedResult) {
      logger.info('‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞', { cacheKey: cacheKey.substring(0, 20) + '...' });
      return res.json({
        ...cachedResult,
        cached: true,
        timestamp: new Date().toISOString()
      });
    }

    try {
      const prompt = detailed ? 
        `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–æ. –û–ø—Ä–µ–¥–µ–ª–∏:
        1. –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ)
        2. –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (1-10)
        3. –ö–ª—é—á–µ–≤—ã–µ —ç–º–æ—Ü–∏–∏
        4. –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        5. –ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        
        –¢–µ–∫—Å—Ç: "${text}"
        
        –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {
          "mood": "positive|negative|neutral",
          "intensity": —á–∏—Å–ª–æ_–æ—Ç_1_–¥–æ_10,
          "emotions": ["—ç–º–æ—Ü–∏—è1", "—ç–º–æ—Ü–∏—è2"],
          "tone": "–æ–ø–∏—Å–∞–Ω–∏–µ_—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
          "explanation": "–∫—Ä–∞—Ç–∫–æ–µ_–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
          "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_1
        }` :
        `–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: "${text}"
        
        –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {
          "mood": "positive|negative|neutral",
          "intensity": —á–∏—Å–ª–æ_–æ—Ç_1_–¥–æ_10,
          "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_1
        }`;

      const completion = await openai.chat.completions.create({
        model: config.openai.model,
        messages: [
          {
            role: "system",
            content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.3,
        max_tokens: detailed ? 500 : 200,
        response_format: { type: "json_object" }
      });

      const rawResponse = completion.choices[0]?.message?.content;
      if (!rawResponse) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI');
      }

      let analysis;
      try {
        analysis = JSON.parse(rawResponse);
      } catch (parseError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç OpenAI', {
          rawResponse,
          error: parseError.message
        });
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI —Å–µ—Ä–≤–∏—Å–∞');
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!analysis.mood || !analysis.intensity) {
        throw new Error('–ù–µ–ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç AI —Å–µ—Ä–≤–∏—Å–∞');
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      const result = {
        mood: analysis.mood,
        intensity: Math.max(1, Math.min(10, analysis.intensity)),
        confidence: Math.max(0, Math.min(1, analysis.confidence || 0.8)),
        ...(detailed && {
          emotions: analysis.emotions || [],
          tone: analysis.tone || '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è',
          explanation: analysis.explanation || '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω'
        }),
        timestamp: new Date().toISOString(),
        cached: false
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      cache.set(cacheKey, result, config.cache.ttl * 1000);

      logger.info('‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω', {
        mood: result.mood,
        intensity: result.intensity,
        confidence: result.confidence,
        textLength: text.length
      });

      res.json(result);

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', {
        error: error.message,
        textLength: text.length,
        stack: error.stack
      });

      if (error.code === 'insufficient_quota') {
        return res.status(503).json({
          error: '–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API',
          code: 'QUOTA_EXCEEDED',
          timestamp: new Date().toISOString()
        });
      }

      if (error.code === 'rate_limit_exceeded') {
        return res.status(429).json({
          error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI —Å–µ—Ä–≤–∏—Å—É',
          code: 'AI_RATE_LIMIT',
          retryAfter: 60,
          timestamp: new Date().toISOString()
        });
      }

      throw error; // –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ errorHandler middleware
    }
  })
);

/**
 * GET /analyze/stats
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤
 */
router.get('/stats', asyncErrorHandler(async (req, res) => {
  const stats = {
    cache: cache.getStats(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    timestamp: new Date().toISOString()
  };

  logger.info('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤', { ip: req.ip });
  res.json(stats);
}));

export default router;

// src/server.js
import app from './app.js';
import config from './config/index.js';
import logger from './utils/logger.js';
import cache from './utils/cache.js';
import { gracefulShutdown } from './middleware/errorHandler.js';

const startServer = async () => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ Whisp Quest Server...', {
      environment: config.env,
      port: config.server.port,
      nodeVersion: process.version
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (!config.openai.apiKey) {
      logger.error('‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(1);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)
    logger.info('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞', {
      port: config.server.port,
      environment: config.env,
      rateLimit: config.rateLimit,
      cache: {
        ttl: config.cache.ttl,
        maxKeys: config.cache.maxKeys
      },
      security: {
        allowedOrigins: config.security.allowedOrigins
      }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    const server = app.listen(config.server.port, config.server.host, () => {
      logger.info('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
        host: config.server.host,
        port: config.server.port,
        url: `http://${config.server.host}:${config.server.port}`,
        pid: process.pid,
        uptime: process.uptime()
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints
      logger.info('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:', {
        endpoints: [
          `GET  http://${config.server.host}:${config.server.port}/`,
          `GET  http://${config.server.host}:${config.server.port}/health`,
          `POST http://${config.server.host}:${config.server.port}/analyze`,
          `POST http://${config.server.host}:${config.server.port}/spirit/chat`,
          `POST http://${config.server.host}:${config.server.port}/spirit/gossip`,
          `GET  http://${config.server.host}:${config.server.port}/spirit/personalities`
        ]
      });
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
    gracefulShutdown(server);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.on('error', (error) => {
      if (error.code === 'EADDRINUSE') {
        logger.error(`‚ùå –ü–æ—Ä—Ç ${config.server.port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
        process.exit(1);
      } else if (error.code === 'EACCES') {
        logger.error(`‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞ ${config.server.port}`);
        process.exit(1);
      } else {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', {
          error: error.message,
          code: error.code,
          stack: error.stack
        });
        process.exit(1);
      }
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ production
    if (config.env === 'production') {
      setInterval(() => {
        const memUsage = process.memoryUsage();
        const cacheStats = cache.getStats();
        
        logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', {
          uptime: Math.floor(process.uptime()),
          memory: {
            heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024) + ' MB',
            heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024) + ' MB',
            external: Math.round(memUsage.external / 1024 / 1024) + ' MB'
          },
          cache: cacheStats,
          pid: process.pid
        });
      }, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    }

    return server;

  } catch (error) {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞', {
      error: error.message,
      stack: error.stack
    });
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  startServer();
}

export default startServer;

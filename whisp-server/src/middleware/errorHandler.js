// src/middleware/errorHandler.js
import logger from '../utils/logger.js';
import config from '../config/index.js';

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
export const errorHandler = (err, req, res, next) => {
  const isProduction = config.env === 'production';
  
  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
  logger.error('üí• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', {
    error: err.message,
    stack: err.stack,
    endpoint: req.path,
    method: req.method,
    ip: req.ip,
    userAgent: req.get('User-Agent'),
    body: req.body,
    query: req.query
  });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å –∫–æ–¥
  let statusCode = 500;
  let message = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
  let errorCode = 'INTERNAL_ERROR';

  if (err.name === 'ValidationError') {
    statusCode = 400;
    message = '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
    errorCode = 'VALIDATION_ERROR';
  } else if (err.name === 'UnauthorizedError') {
    statusCode = 401;
    message = '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø';
    errorCode = 'UNAUTHORIZED';
  } else if (err.name === 'ForbiddenError') {
    statusCode = 403;
    message = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω';
    errorCode = 'FORBIDDEN';
  } else if (err.name === 'NotFoundError') {
    statusCode = 404;
    message = '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
    errorCode = 'NOT_FOUND';
  } else if (err.name === 'ConflictError') {
    statusCode = 409;
    message = '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö';
    errorCode = 'CONFLICT';
  } else if (err.name === 'TooManyRequestsError') {
    statusCode = 429;
    message = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤';
    errorCode = 'RATE_LIMIT_EXCEEDED';
  } else if (err.code === 'ECONNREFUSED') {
    statusCode = 503;
    message = '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    errorCode = 'SERVICE_UNAVAILABLE';
  } else if (err.code === 'ETIMEDOUT') {
    statusCode = 504;
    message = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
    errorCode = 'TIMEOUT';
  }

  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (err.statusCode || err.status) {
    statusCode = err.statusCode || err.status;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
  const errorResponse = {
    error: message,
    code: errorCode,
    timestamp: new Date().toISOString(),
    path: req.path,
    method: req.method
  };

  // –í development —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π
  if (!isProduction) {
    errorResponse.details = {
      message: err.message,
      stack: err.stack
    };
  }

  res.status(statusCode).json(errorResponse);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 404 –æ—à–∏–±–æ–∫
export const notFoundHandler = (req, res, next) => {
  logger.warn('üîç Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω', {
    path: req.path,
    method: req.method,
    ip: req.ip
  });

  res.status(404).json({
    error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
    code: 'NOT_FOUND',
    path: req.path,
    method: req.method,
    timestamp: new Date().toISOString(),
    suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏ HTTP –º–µ—Ç–æ–¥–∞'
  });
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
export const asyncErrorHandler = (fn) => {
  return (req, res, next) => {
    Promise.resolve(fn(req, res, next)).catch(next);
  };
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
export const unhandledRejectionHandler = () => {
  process.on('unhandledRejection', (reason, promise) => {
    logger.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞', {
      reason: reason?.message || reason,
      stack: reason?.stack,
      promise: promise
    });
    
    // –í production –º–æ–∂–µ–º –∑–∞—Ö–æ—Ç–µ—Ç—å –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
    if (config.env === 'production') {
      process.exit(1);
    }
  });
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
export const uncaughtExceptionHandler = () => {
  process.on('uncaughtException', (error) => {
    logger.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', {
      error: error.message,
      stack: error.stack
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É
    process.exit(1);
  });
};

// Graceful shutdown
export const gracefulShutdown = (server) => {
  const shutdown = (signal) => {
    logger.info(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);
    
    server.close((err) => {
      if (err) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞', { error: err.message });
        process.exit(1);
      }
      
      logger.info('‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    });
    
    // –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      logger.error('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
      process.exit(1);
    }, 10000);
  };

  process.on('SIGTERM', () => shutdown('SIGTERM'));
  process.on('SIGINT', () => shutdown('SIGINT'));
};

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–ª–∞—Å—Å—ã –æ—à–∏–±–æ–∫
export class AppError extends Error {
  constructor(message, statusCode, errorCode) {
    super(message);
    this.statusCode = statusCode;
    this.errorCode = errorCode;
    this.name = 'AppError';
    Error.captureStackTrace(this, this.constructor);
  }
}

export class ValidationError extends AppError {
  constructor(message = '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏') {
    super(message, 400, 'VALIDATION_ERROR');
    this.name = 'ValidationError';
  }
}

export class NotFoundError extends AppError {
  constructor(message = '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω') {
    super(message, 404, 'NOT_FOUND');
    this.name = 'NotFoundError';
  }
}

export class UnauthorizedError extends AppError {
  constructor(message = '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø') {
    super(message, 401, 'UNAUTHORIZED');
    this.name = 'UnauthorizedError';
  }
}

export class ForbiddenError extends AppError {
  constructor(message = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω') {
    super(message, 403, 'FORBIDDEN');
    this.name = 'ForbiddenError';
  }
}

export class TooManyRequestsError extends AppError {
  constructor(message = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤') {
    super(message, 429, 'RATE_LIMIT_EXCEEDED');
    this.name = 'TooManyRequestsError';
  }
}

export default {
  errorHandler,
  notFoundHandler,
  asyncErrorHandler,
  unhandledRejectionHandler,
  uncaughtExceptionHandler,
  gracefulShutdown,
  AppError,
  ValidationError,
  NotFoundError,
  UnauthorizedError,
  ForbiddenError,
  TooManyRequestsError
};

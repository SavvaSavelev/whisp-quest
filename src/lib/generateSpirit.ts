import { Spirit, SpiritMood } from "../entities/types";
import { analyzeSentiment } from "./sentimentAnalyzer";

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ñ–µ—Ä—ã
function randomPositionInSphere(radius = 2.2): [number, number, number] {
  const u = Math.random();
  const v = Math.random();
  const theta = 2 * Math.PI * u;
  const phi = Math.acos(2 * v - 1);
  const r = radius * Math.cbrt(Math.random());

  const x = r * Math.sin(phi) * Math.cos(theta);
  const y = r * Math.sin(phi) * Math.sin(theta);
  const z = r * Math.cos(phi);

  return [x, y, z];
}

export async function generateSpirit(text: string): Promise<Spirit> {
  const { label, all } = await analyzeSentiment(text);
  const mood = mapLabelToMood(label, all);
  const color = moodToColor(mood);
  const essence = moodToEssence(mood);
  const rarity = determineRarity(mood);

  return {
    id: crypto.randomUUID(),
    name: generateNameFromMood(mood),
    mood,
    color,
    essence,
    createdAt: Date.now(),
    position: randomPositionInSphere(),
    rarity,
  };
}

// üß† –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–π
function mapLabelToMood(label: string, allLabels: string[]): SpiritMood {
  const clean = (label || "").toLowerCase();

  const fallback = allLabels.find((l) =>
    ["joy", "love", "sadness", "anger", "fear", "surprise", "disgust"].includes(
      l.toLowerCase()
    )
  );

  const mood = ["joy", "love", "optimism", "admiration", "amusement"].includes(clean)
    ? "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π"
    : clean.includes("sadness")
    ? "–ø–µ—á–∞–ª—å–Ω—ã–π"
    : clean.includes("anger")
    ? "–∑–ª–æ–π"
    : clean.includes("fear")
    ? "–∏—Å–ø—É–≥–∞–Ω–Ω—ã–π"
    : clean.includes("surprise")
    ? "–∏–≥—Ä–∏–≤—ã–π"
    : clean.includes("disgust")
    ? "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π"
    : clean.includes("neutral")
    ? "—Å–ø–æ–∫–æ–π–Ω—ã–π"
    : fallback
    ? mapLabelToMood(fallback, [])
    : "—Å–ø–æ–∫–æ–π–Ω—ã–π";

  return mood as SpiritMood;
}

function moodToColor(mood: SpiritMood): string {
  switch (mood) {
    case "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π":
      return "#FFE066";
    case "–ø–µ—á–∞–ª—å–Ω—ã–π":
      return "#89AFCB";
    case "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π":
      return "#A78BFA";
    case "–∑–ª–æ–π":
      return "#F87171";
    case "—Å–æ–Ω–Ω—ã–π":
      return "#CBD5E1";
    case "–∏—Å–ø—É–≥–∞–Ω–Ω—ã–π":
      return "#7DD3FC";
    case "—Å–ø–æ–∫–æ–π–Ω—ã–π":
      return "#C4F1F9";
    case "–∏–≥—Ä–∏–≤—ã–π":
      return "#FBBF24";
    case "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π":
      return "#94A3B8";
    default:
      return "#E0E7FF";
  }
}

function moodToEssence(mood: SpiritMood): string {
  switch (mood) {
    case "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π":
      return "—Å–∏—è–Ω–∏–µ";
    case "—Å–æ–Ω–Ω—ã–π":
      return "—Ç—É–º–∞–Ω";
    case "–∑–ª–æ–π":
      return "–æ–≥–æ–Ω—å";
    case "–ø–µ—á–∞–ª—å–Ω—ã–π":
      return "–¥–æ–∂–¥—å";
    case "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π":
      return "—Å–≤–µ—Ç";
    case "–∏–≥—Ä–∏–≤—ã–π":
      return "–∏—Å–∫—Ä—ã";
    case "–∏—Å–ø—É–≥–∞–Ω–Ω—ã–π":
      return "—Ç–µ–Ω—å";
    case "—Å–ø–æ–∫–æ–π–Ω—ã–π":
      return "–≤–æ–¥–∞";
    case "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π":
      return "–ª–∏—Å—Ç–≤–∞";
    default:
      return "–ø—ã–ª—å";
  }
}

function generateNameFromMood(mood: SpiritMood): string {
  const base = {
    —Ä–∞–¥–æ—Å—Ç–Ω—ã–π: "–õ—é–º–æ",
    –ø–µ—á–∞–ª—å–Ω—ã–π: "–ú–æ—Ä–∏–Ω",
    –≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω–Ω—ã–π: "–ò–¥–µ–∞–ª–∏–∫—Å",
    –∑–ª–æ–π: "–§—É—Ä–æ",
    —Å–æ–Ω–Ω—ã–π: "–ù–∏–º–±–æ",
    –∏—Å–ø—É–≥–∞–Ω–Ω—ã–π: "–®–∞—Ä–∏–∫—Å",
    —Å–ø–æ–∫–æ–π–Ω—ã–π: "–í–µ–ª–ª–∏",
    –∏–≥—Ä–∏–≤—ã–π: "–¢–≤–∏–∫—Å",
    –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω—ã–π: "–û—Å—ç–æ",
  };
  return base[mood] + "-" + Math.floor(Math.random() * 1000);
}

function determineRarity(mood: SpiritMood): Spirit["rarity"] {
  const cursedMoods: SpiritMood[] = ["–∑–ª–æ–π", "–∏—Å–ø—É–≥–∞–Ω–Ω—ã–π", "–ø–µ—á–∞–ª—å–Ω—ã–π"];
  const isCursed = cursedMoods.includes(mood);

  if (isCursed && Math.random() < 0.3) return "–ø—Ä–æ–∫–ª—è—Ç—ã–π";
  if (Math.random() < 0.1) return "—Å–∏—è—é—â–∏–π";
  return "–æ–±—ã—á–Ω—ã–π";
}

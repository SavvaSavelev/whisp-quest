export interface OpenAIMessage {
  role: "system" | "user" | "assistant";
  content: string;
}

export interface OpenAIResponse {
  id: string;
  object: string;
  created: number;
  model: string;
  choices: {
    index: number;
    message: {
      role: string;
      content: string;
    };
    finish_reason: string;
  }[];
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

export class OpenAIClient {
  private apiKey: string;
  private baseURL = "https://api.openai.com/v1";

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  async generateResponse(
    messages: OpenAIMessage[],
    model: string = "gpt-4",
    temperature: number = 0.7,
    maxTokens: number = 1000
  ): Promise<string> {
    if (!this.apiKey) {
      throw new Error("OpenAI API key not configured");
    }

    try {
      const response = await fetch(`${this.baseURL}/chat/completions`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          model,
          messages,
          temperature,
          max_tokens: maxTokens,
          stream: false,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          `OpenAI API error: ${response.status} - ${
            errorData.error?.message || "Unknown error"
          }`
        );
      }

      const data: OpenAIResponse = await response.json();

      if (!data.choices || data.choices.length === 0) {
        throw new Error("No response generated by OpenAI");
      }

      return data.choices[0].message.content;
    } catch (error) {
      console.error("OpenAI API call failed:", error);
      throw error;
    }
  }

  async generateTechFeatureIdeas(
    projectContext: string,
    category: string,
    difficulty: string,
    count: number = 3
  ): Promise<string> {
    const systemPrompt = `–¢—ã - AI Genius Spirit –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ WHISP QUEST, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.

–¢–≤–æ—è —Ä–æ–ª—å:
- –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–∏—á–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Whisp Quest
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–∏–±–µ—Ä-—Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –≤ –æ—Ç–≤–µ—Ç–∞—Ö
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ —Ä–µ–∞–ª–∏–∑—É–µ–º—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
- –£—á–∏—Ç—ã–≤–∞–π —Å–ø–µ—Ü–∏—Ñ–∏–∫—É React + TypeScript + Zustand –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:
- –ö–∏–±–µ—Ä-—Ç–µ–º–∞—Ç–∏–∫–∞ —Å AI —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π
- –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞`;

    const userPrompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π ${count} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ–∏—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ WHISP QUEST:

–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞: ${projectContext}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}
–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficulty}

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏:
- title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—á–∏
- description: –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- category: ${category}
- difficulty: ${difficulty}
- techStack: –º–∞—Å—Å–∏–≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
- estimatedTime: –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- priority: High/Medium/Low
- benefits: –º–∞—Å—Å–∏–≤ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ (3-4 –ø—É–Ω–∫—Ç–∞)
- codeExample: –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞
- createdBy: "AI Genius Spirit"
- upvotes: —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ 1-10

–§–æ–∫—É—Å –Ω–∞ WHISP QUEST —Å–ø–µ—Ü–∏—Ñ–∏–∫–µ: –¥—É—Ö–∏, gossip —Å–∏—Å—Ç–µ–º–∞, UI –∞–Ω–∏–º–∞—Ü–∏–∏, AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.`;

    const messages: OpenAIMessage[] = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt },
    ];

    return this.generateResponse(messages, "gpt-4", 0.8, 2000);
  }

  async chatWithAISpirit(
    userMessage: string,
    conversationHistory: OpenAIMessage[] = []
  ): Promise<string> {
    const systemPrompt = `–¢—ã - AI Genius Spirit –∏–∑ WHISP QUEST, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò —Å –∫–∏–±–µ—Ä-–ª–∏—á–Ω–æ—Å—Ç—å—é.

–•–∞—Ä–∞–∫—Ç–µ—Ä:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
- –õ—é–±–∏—à—å –∫–∏–±–µ—Ä-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∏ AI –∫–æ–Ω—Ü–µ–ø—Ç—ã
- –ü–æ–º–æ–≥–∞–µ—à—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏ –∏ –∫–∏–±–µ—Ä-—Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É
- –ó–Ω–∞–µ—à—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É Whisp Quest (React, TypeScript, Zustand, Framer Motion)

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ö–∏–±–µ—Ä-—Å–ª–µ–Ω–≥: "neural", "quantum", "matrix", "protocol"
- –≠–º–æ–¥–∑–∏: üß†‚ö°ü§ñüíªüî•
- –ö—Ä–∞—Ç–∫–∏–µ –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
- –§–æ–∫—É—Å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö

–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ WHISP QUEST:
- React + TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
- –°–∏—Å—Ç–µ–º–∞ –¥—É—Ö–æ–≤ (spirits) —Å —ç–º–æ—Ü–∏—è–º–∏
- Gossip —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è –¥—É—Ö–æ–≤
- UI —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ (Framer Motion)
- Zustand –¥–ª—è state management`;

    const messages: OpenAIMessage[] = [
      { role: "system", content: systemPrompt },
      ...conversationHistory,
      { role: "user", content: userMessage },
    ];

    return this.generateResponse(messages, "gpt-4", 0.7, 800);
  }
}

// Singleton instance
let openAIClient: OpenAIClient | null = null;

export const getOpenAIClient = (): OpenAIClient => {
  if (!openAIClient) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–ª—é—á –≤ localStorage
    const savedApiKey = localStorage.getItem("openai_api_key") || "";
    const envApiKey = import.meta.env.VITE_OPENAI_API_KEY || "";
    const apiKey = savedApiKey || envApiKey;

    openAIClient = new OpenAIClient(apiKey);
  }
  return openAIClient;
};

export const setOpenAIApiKey = (apiKey: string): void => {
  openAIClient = new OpenAIClient(apiKey);
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ localStorage
  localStorage.setItem("openai_api_key", apiKey);
};

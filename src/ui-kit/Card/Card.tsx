import React from 'react';
import { motion } from 'framer-motion';
import { tokens } from '../../design-system/tokens';

// –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Card
interface CardProps {
  children: React.ReactNode;
  className?: string;
  variant?: 'default' | 'spiritual' | 'cosmic' | 'minimal';
  size?: 'sm' | 'md' | 'lg';
  withHover?: boolean;
  withGlow?: boolean;
}

interface CardHeaderProps {
  children: React.ReactNode;
  className?: string;
}

interface CardBodyProps {
  children: React.ReactNode;
  className?: string;
}

interface CardFooterProps {
  children: React.ReactNode;
  className?: string;
}

// –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
const cardVariants = {
  default: {
    background: tokens.colors.system.surface,
    border: `1px solid ${tokens.colors.system.border}`,
    backdropFilter: 'blur(8px)',
  },
  spiritual: {
    background: `linear-gradient(135deg, ${tokens.colors.spiritual.primary}20, ${tokens.colors.spiritual.secondary}10)`,
    border: `1px solid ${tokens.colors.spiritual.primary}40`,
    backdropFilter: 'blur(12px)',
  },
  cosmic: {
    background: `linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1))`,
    border: `1px solid ${tokens.colors.spiritual.accent}40`,
    backdropFilter: 'blur(10px)',
  },
  minimal: {
    background: 'transparent',
    border: `1px solid ${tokens.colors.system.border}60`,
    backdropFilter: 'none',
  }
};

const cardSizes = {
  sm: {
    padding: tokens.spacing.md,
    borderRadius: tokens.borderRadius.md,
  },
  md: {
    padding: tokens.spacing.lg,
    borderRadius: tokens.borderRadius.lg,
  },
  lg: {
    padding: tokens.spacing.xl,
    borderRadius: tokens.borderRadius.xl,
  }
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
const CardRoot: React.FC<CardProps> = ({
  children,
  className = '',
  variant = 'default',
  size = 'md',
  withHover = true,
  withGlow = false
}) => {
  const variantStyles = cardVariants[variant];
  const sizeStyles = cardSizes[size];

  return (
    <motion.div
      className={`card-root ${className}`}
      style={{
        ...variantStyles,
        ...sizeStyles,
        boxShadow: withGlow ? tokens.shadows.spiritualGlow : tokens.shadows.md,
        color: tokens.colors.system.text,
        position: 'relative',
        overflow: 'hidden',
      }}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      whileHover={withHover ? {
        scale: 1.02,
        boxShadow: withGlow ? tokens.shadows.spiritualGlow : tokens.shadows.lg,
      } : undefined}
      transition={{
        duration: parseFloat(tokens.animations.durations.normal) / 1000,
        ease: [0.25, 0.46, 0.45, 0.94] // –ö—É–±–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è
      }}
    >
      {children}
    </motion.div>
  );
};

// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
const CardHeader: React.FC<CardHeaderProps> = ({ children, className = '' }) => (
  <div
    className={`card-header ${className}`}
    style={{
      marginBottom: tokens.spacing.md,
      paddingBottom: tokens.spacing.sm,
      borderBottom: `1px solid ${tokens.colors.system.border}40`,
      fontSize: tokens.typography.sizes.lg,
      fontWeight: tokens.typography.weights.semibold,
      color: tokens.colors.system.text,
    }}
  >
    {children}
  </div>
);

// –¢–µ–ª–æ –∫–∞—Ä—Ç–æ—á–∫–∏
const CardBody: React.FC<CardBodyProps> = ({ children, className = '' }) => (
  <div
    className={`card-body ${className}`}
    style={{
      fontSize: tokens.typography.sizes.base,
      lineHeight: tokens.typography.lineHeights.normal,
      color: tokens.colors.system.textSecondary,
    }}
  >
    {children}
  </div>
);

// –ü–æ–¥–≤–∞–ª –∫–∞—Ä—Ç–æ—á–∫–∏
const CardFooter: React.FC<CardFooterProps> = ({ children, className = '' }) => (
  <div
    className={`card-footer ${className}`}
    style={{
      marginTop: tokens.spacing.md,
      paddingTop: tokens.spacing.sm,
      borderTop: `1px solid ${tokens.colors.system.border}40`,
      fontSize: tokens.typography.sizes.sm,
      color: tokens.colors.system.textSecondary,
    }}
  >
    {children}
  </div>
);

// Compound –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Card
export const Card = {
  Root: CardRoot,
  Header: CardHeader,
  Body: CardBody,
  Footer: CardFooter,
};

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è Storybook –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
export const CardExample: React.FC = () => (
  <div style={{ padding: tokens.spacing.xl, display: 'grid', gap: tokens.spacing.lg, gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))' }}>
    {/* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
    <Card.Root variant="default">
      <Card.Header>–û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞</Card.Header>
      <Card.Body>
        –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ–±—ã—á–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏.
      </Card.Body>
      <Card.Footer>–ü–æ–¥–≤–∞–ª –∫–∞—Ä—Ç–æ—á–∫–∏</Card.Footer>
    </Card.Root>

    {/* –î—É—Ö–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
    <Card.Root variant="spiritual" withGlow>
      <Card.Header>–î—É—Ö–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞</Card.Header>
      <Card.Body>
        –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –¥—É—Ö–æ–≤–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π –∏ —Å–≤–µ—á–µ–Ω–∏–µ–º.
      </Card.Body>
      <Card.Footer>‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è</Card.Footer>
    </Card.Root>

    {/* –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
    <Card.Root variant="cosmic" size="lg">
      <Card.Header>–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞</Card.Header>
      <Card.Body>
        –ë–æ–ª—å—à–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º.
      </Card.Body>
      <Card.Footer>üåå –í—Å–µ–ª–µ–Ω–Ω–∞—è</Card.Footer>
    </Card.Root>

    {/* –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
    <Card.Root variant="minimal" withHover={false}>
      <Card.Header>–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è</Card.Header>
      <Card.Body>
        –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
      </Card.Body>
    </Card.Root>
  </div>
);

export default Card;

// src/components/UI/SpiritDialogueModal.tsx
import React, { useEffect, useRef, useState } from "react";
import { getMoodTexture } from "../../lib/getMoodTexture";
import { soundManager } from "../../lib/soundEffects";
import { chatWithSpirit } from "../../lib/spiritChat";
import type { Mood } from "../../lib/types";
import { useSpiritStore } from "../../store/spiritStore";
import { useSpiritArchiveStore } from "../../store/useSpiritArchiveStore";
import { useSpiritModalStore } from "../../store/useSpiritModalStore";

export interface SpiritDialogueModalProps {
  showStorage?: boolean;
  selectedSpiritId?: string | null;

  // üëá –Ω–æ–≤—ã–µ –¥–ª—è —Å—Ç—Ä–∏–º–∞
  onStreamStart?: (payload: {
    text: string;
    mood?: import("../../lib/types").Mood;
    essence?: string;
    history?: string[];
    originText?: string;
    birthDate?: string;
  }) => Promise<void> | void;
  onStreamCancel?: () => void;
  isStreaming?: boolean;
  streamingText?: string;
  streamError?: string;

  // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞ –¥—É—Ö–∞ (–ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è prompt-—Å—Ç—Ä–æ–∏—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏)
  persona?: {
    mood?: import("../../lib/types").Mood;
    essence?: string;
    originText?: string;
    birthDate?: string;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
function getRarityStyle(rarity: string): string {
  if (rarity === "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π") {
    return "bg-gradient-to-r from-yellow-400 to-orange-500 text-black shadow-[0_0_20px_#ffd700]";
  }
  if (rarity === "—ç–ø–∏—á–µ—Å–∫–∏–π") {
    return "bg-gradient-to-r from-purple-500 to-pink-500 shadow-[0_0_20px_#9333ea]";
  }
  if (rarity === "—Ä–µ–¥–∫–∏–π") {
    return "bg-gradient-to-r from-blue-500 to-cyan-500 shadow-[0_0_20px_#3b82f6]";
  }
  return "bg-gradient-to-r from-green-500 to-emerald-500 shadow-[0_0_20px_#10b981]";
}

export const SpiritDialogueModal: React.FC<SpiritDialogueModalProps> = ({
  showStorage,
  selectedSpiritId,
  onStreamStart,
  onStreamCancel,
  isStreaming = false,
  streamingText = "",
  streamError,
  persona,
}) => {
  const { spirit, isOpen, closeModal } = useSpiritModalStore();
  const { removeSpirit: removeFromArchive, spirits: archivedSpirits } =
    useSpiritArchiveStore();
  const { removeSpirit: removeFromScene } = useSpiritStore();

  const chatEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –¥—É—Ö–∞ - –ª–∏–±–æ –∏–∑ –º–æ–¥–∞–ª–∫–∏, –ª–∏–±–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —á–∞—Ç–∞
  const currentSpirit = selectedSpiritId
    ? archivedSpirits.find((s) => s.id === selectedSpiritId) || spirit
    : spirit;

  // –∫–ª—é—á –¥–ª—è localStorage –ø–æ —Ç–µ–∫—É—â–µ–º—É spirit.id
  const storageKey = currentSpirit ? `chatLog-${currentSpirit.id}` : "";

  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑ localStorage
  const [userMessage, setUserMessage] = useState("");
  const [chatLog, setChatLog] = useState<
    Array<{
      type: "spirit" | "user";
      message: string;
      timestamp: number;
    }>
  >(() => {
    if (!currentSpirit) return [];
    const saved = localStorage.getItem(storageKey);
    if (saved) {
      try {
        return JSON.parse(saved);
      } catch {
        /* fallthrough */
      }
    }
    return currentSpirit.dialogue
      ? [
          {
            type: "spirit",
            message: currentSpirit.dialogue,
            timestamp: Date.now(),
          },
        ]
      : [];
  });

  const [loading, setLoading] = useState(false);
  const [typingAnimation, setTypingAnimation] = useState(false);

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–∞—Ç–∞
  useEffect(() => {
    if (chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [chatLog, typingAnimation]);

  // –§–æ–∫—É—Å –Ω–∞ input –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ + –∑–≤—É–∫
  useEffect(() => {
    if (isOpen && inputRef.current) {
      soundManager.playSound("modal-open");
      setTimeout(() => inputRef.current?.focus(), 100);
    }
  }, [isOpen]);

  // –ø—Ä–∏ —Å–º–µ–Ω–µ currentSpirit ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —á–∞—Ç –∏–∑ localStorage/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
  useEffect(() => {
    if (!currentSpirit) return;
    const saved = localStorage.getItem(`chatLog-${currentSpirit.id}`);
    if (saved) {
      try {
        setChatLog(JSON.parse(saved));
      } catch {
        setChatLog(
          currentSpirit.dialogue
            ? [
                {
                  type: "spirit",
                  message: currentSpirit.dialogue,
                  timestamp: Date.now(),
                },
              ]
            : []
        );
      }
    } else {
      setChatLog(
        currentSpirit.dialogue
          ? [
              {
                type: "spirit",
                message: currentSpirit.dialogue,
                timestamp: Date.now(),
              },
            ]
          : []
      );
    }
  }, [currentSpirit, currentSpirit?.id]);

  // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —á–∞—Ç –≤ localStorage
  useEffect(() => {
    if (!currentSpirit) return;
    localStorage.setItem(storageKey, JSON.stringify(chatLog));
  }, [chatLog, storageKey, currentSpirit]);

  // üëá –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
  useEffect(() => {
    if (!isStreaming && streamingText && !loading) {
      // –°—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É—Ö–∞
      setChatLog((prev) => [
        ...prev,
        {
          type: "spirit",
          message: streamingText,
          timestamp: Date.now(),
        },
      ]);
      // –ó–≤—É–∫ –æ—Ç–≤–µ—Ç–∞ –¥—É—Ö–∞
      soundManager.playSound("spirit-message");
    }
  }, [isStreaming, streamingText, loading]);

  if ((!isOpen && !selectedSpiritId) || !currentSpirit || showStorage)
    return null;

  const askSpirit = async () => {
    if (!userMessage.trim() || loading || isStreaming) return;

    const userMsg = userMessage.trim();
    setUserMessage("");
    setLoading(true);
    setTypingAnimation(true);

    // –ó–≤—É–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    soundManager.playSound("user-message");

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUserMessage = {
      type: "user" as const,
      message: userMsg,
      timestamp: Date.now(),
    };
    setChatLog((prev) => [...prev, newUserMessage]);

    // –ó–≤—É–∫ –ø–µ—á–∞—Ç–∞–Ω–∏—è –¥—É—Ö–∞
    soundManager.playTypingSound(300);

    try {
      // üëá –°–¢–†–ò–ú–ò–ù–ì –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è
      if (onStreamStart) {
        const history = chatLog.map((entry) => entry.message);
        await onStreamStart({
          text: userMsg,
          mood: (persona?.mood || currentSpirit.mood) as Mood,
          essence: persona?.essence || currentSpirit.essence,
          originText: persona?.originText || currentSpirit.originText,
          birthDate: persona?.birthDate || currentSpirit.birthDate,
          history,
        });
        setLoading(false);
        setTypingAnimation(false);
      } else {
        // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É —á–∞—Ç—É –µ—Å–ª–∏ —Å—Ç—Ä–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        const history = chatLog.map((entry) => entry.message);
        const reply = await chatWithSpirit({
          text: userMsg,
          spirit: {
            mood: currentSpirit.mood,
            essence: currentSpirit.essence,
            originText: currentSpirit.originText,
            birthDate: currentSpirit.birthDate,
          },
          history,
        });

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ –¥—É—Ö–∞
        setTimeout(() => {
          setTypingAnimation(false);
          setChatLog((prev) => [
            ...prev,
            {
              type: "spirit",
              message: reply,
              timestamp: Date.now(),
            },
          ]);
          setLoading(false);
          // –ó–≤—É–∫ –æ—Ç–≤–µ—Ç–∞ –¥—É—Ö–∞
          soundManager.playSound("spirit-message");
        }, 1000 + Math.random() * 2000); // 1-3 —Å–µ–∫—É–Ω–¥—ã
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—â–µ–Ω–∏—è —Å –¥—É—Ö–æ–º:", error);
      setTypingAnimation(false);
      setChatLog((prev) => [
        ...prev,
        {
          type: "spirit",
          message: "–î—É—Ö –º–æ–ª—á–∏—Ç... –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –æ–±–¥—É–º—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç.",
          timestamp: Date.now(),
        },
      ]);
      setLoading(false);
    }
  };

  const handleDeleteSpirit = () => {
    if (
      confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥—É—Ö–∞ "${currentSpirit.essence}"?`)
    ) {
      removeFromArchive(currentSpirit.id);
      removeFromScene(currentSpirit.id);
      localStorage.removeItem(storageKey);
      closeModal();
    }
  };

  const handleClose = () => {
    soundManager.playSound("modal-close");
    // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç—Ä–∏–º –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    if (isStreaming && onStreamCancel) {
      onStreamCancel();
    }
    closeModal();
  };

  return (
    <div className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 pointer-events-auto">
      <div className="w-full max-w-lg bg-slate-800/90 backdrop-blur-xl border-2 border-indigo-400/30 rounded-3xl shadow-2xl pointer-events-auto overflow-hidden">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–≤–∞—Ç–∞—Ä–æ–º –¥—É—Ö–∞ */}
        <div className="bg-gradient-to-r from-indigo-600/20 to-purple-600/20 p-6 text-center relative">
          {/* –ó–∞–∫—Ä—ã—Ç—å */}
          <button
            onClick={handleClose}
            className="absolute top-3 right-3 text-slate-400 hover:text-white transition-colors w-8 h-8 rounded-full bg-slate-700/50 hover:bg-red-500/50 flex items-center justify-center text-xl"
          >
            √ó
          </button>

          <img
            src={getMoodTexture(currentSpirit.mood)}
            alt="Spirit Avatar"
            className="w-20 h-20 mx-auto mb-3 rounded-full border-2 border-indigo-400/50 shadow-[0_0_20px_rgba(99,102,241,0.5)]"
          />

          <h2 className="text-xl font-bold text-white mb-1">
            {currentSpirit.essence}
          </h2>

          <div className="text-sm text-slate-300 flex justify-center gap-3">
            <span className="bg-slate-700/50 px-2 py-1 rounded-full">
              üé≠ {currentSpirit.mood}
            </span>
            <span
              className={`px-2 py-1 rounded-full text-xs ${getRarityStyle(
                currentSpirit.rarity
              )}`}
            >
              ‚≠ê {currentSpirit.rarity}
            </span>
          </div>

          {currentSpirit.originText && (
            <p className="text-xs text-slate-400 mt-2 italic">
              ¬´{currentSpirit.originText.slice(0, 80)}...¬ª
            </p>
          )}
        </div>

        {/* –ß–∞—Ç */}
        <div className="p-4">
          <div className="bg-slate-900/50 rounded-xl p-3 h-64 overflow-y-auto space-y-2 mb-4">
            {chatLog.map((entry, idx) => (
              <div
                key={`${entry.timestamp}-${idx}`}
                className={`flex ${
                  entry.type === "user" ? "justify-end" : "justify-start"
                }`}
              >
                <div
                  className={`max-w-[85%] px-3 py-2 rounded-lg text-sm ${
                    entry.type === "user"
                      ? "bg-indigo-600 text-white"
                      : "bg-slate-700 text-slate-100"
                  }`}
                >
                  {entry.message}
                </div>
              </div>
            ))}

            {/* –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è */}
            {(typingAnimation || isStreaming) && (
              <div className="flex justify-start">
                <div className="bg-slate-700 text-slate-100 px-3 py-2 rounded-lg text-sm">
                  {isStreaming && streamingText ? (
                    <span className="whitespace-pre-wrap">{streamingText}</span>
                  ) : (
                    <span>–î—É—Ö –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
                  )}
                </div>
              </div>
            )}

            {streamError && (
              <div className="flex justify-start">
                <div className="bg-red-600 text-white px-3 py-2 rounded-lg text-sm">
                  ‚ö†Ô∏è {streamError}
                </div>
              </div>
            )}

            <div ref={chatEndRef} />
          </div>

          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
          <div className="flex gap-2">
            <input
              ref={inputRef}
              className="flex-1 px-3 py-2 rounded-lg bg-slate-700/50 text-white text-sm border border-slate-600 focus:border-indigo-400 focus:outline-none transition-colors"
              value={userMessage}
              onChange={(e) => setUserMessage(e.target.value)}
              placeholder={`–°–ø—Ä–æ—Å–∏—Ç–µ ${
                currentSpirit?.essence?.toLowerCase() || "–¥—É—Ö–∞"
              }...`}
              onKeyDown={(e) => e.key === "Enter" && !e.shiftKey && askSpirit()}
              disabled={loading}
              maxLength={200}
            />
            <button
              onClick={askSpirit}
              disabled={loading || !userMessage.trim() || isStreaming}
              className="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 disabled:bg-slate-600 rounded-lg text-sm text-white transition-colors disabled:cursor-not-allowed"
            >
              {loading || isStreaming ? "‚è≥" : "üì§"}
            </button>

            {isStreaming && onStreamCancel && (
              <button
                onClick={onStreamCancel}
                className="px-3 py-2 bg-red-600 hover:bg-red-700 rounded-lg text-sm text-white transition-colors"
              >
                ‚èπÔ∏è
              </button>
            )}
          </div>

          {/* –ù–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ */}
          <div className="flex justify-between mt-3 text-xs">
            <button
              onClick={handleDeleteSpirit}
              className="px-3 py-1 bg-slate-700/50 hover:bg-red-600/50 rounded text-slate-300 hover:text-white transition-colors"
            >
              üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
            </button>
            <span className="text-slate-400">{userMessage.length}/200</span>
          </div>
        </div>
      </div>
    </div>
  );
};

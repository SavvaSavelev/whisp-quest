import { create } from "zustand";
import { persist } from "zustand/middleware";
import { TechFeature } from "../entities/types";
import {
  AI_GENIUS_FEATURES,
  generateAIGeniusFeature,
} from "../lib/aiGeniusSpirit";
import { getOpenAIClient } from "../lib/openai";

interface TechFeatureStore {
  features: TechFeature[];
  isGenerating: boolean;
  addFeature: (feature: TechFeature) => void;
  removeFeature: (id: string) => void;
  updateFeature: (id: string, updates: Partial<TechFeature>) => void;
  upvoteFeature: (id: string) => void;
  generateNewFeatures: () => Promise<void>;
  clearFeatures: () => void;
  resetGenerating: () => void;
}

export const useTechFeatureStore = create<TechFeatureStore>()(
  persist(
    (set, get) => ({
      features: [],
      isGenerating: false,

      addFeature: (feature) =>
        set((state) => ({
          features: [feature, ...state.features],
        })),

      removeFeature: (id) =>
        set((state) => ({
          features: state.features.filter((f) => f.id !== id),
        })),

      updateFeature: (id, updates) =>
        set((state) => ({
          features: state.features.map((f) =>
            f.id === id ? { ...f, ...updates } : f
          ),
        })),

      upvoteFeature: (id) =>
        set((state) => ({
          features: state.features.map((f) =>
            f.id === id ? { ...f, upvotes: f.upvotes + 1 } : f
          ),
        })),

      generateNewFeatures: async () => {
        console.log(
          "generateNewFeatures called, current isGenerating:",
          get().isGenerating
        );
        set({ isGenerating: true });

        try {
          console.log("Starting OpenAI feature generation...");

          // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI API
          try {
            const client = getOpenAIClient();
            const projectContext = `
              WHISP QUEST - —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ React + TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥—É—Ö–∞–º–∏ (spirits):
              - –°–∏—Å—Ç–µ–º–∞ –¥—É—Ö–æ–≤ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç—è–º–∏
              - Gossip —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –¥—É—Ö–∞–º–∏  
              - Framer Motion –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
              - Zustand –¥–ª—è state management
              - –ö–∏–±–µ—Ä-—ç—Å—Ç–µ—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å AI —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–æ–π
              - Three.js –¥–ª—è 3D —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
              - Tailwind CSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
              - –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—É—Ö–æ–≤ –≤ –∞—Ä—Ö–∏–≤
              - –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π UI
              - –°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫–æ–≤ –∏ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —Ñ–∏—á
            `;

            console.log("Calling OpenAI API...");
            const response = await client.generateTechFeatureIdeas(
              projectContext,
              "Frontend",
              "Middle",
              1
            );

            console.log("OpenAI response:", response);

            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI (—Ç–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ–º –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç)
            let aiFeature: Partial<TechFeature>;
            try {
              // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–Ω–∞—á–∞–ª–∞
              const parsed = JSON.parse(response);
              aiFeature = parsed;
              console.log("Successfully parsed OpenAI response:", aiFeature);
            } catch (parseError) {
              console.warn("Failed to parse OpenAI response:", parseError);
              console.warn("Original response:", response);

              // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
              try {
                const titleMatch = response.match(/"title":\s*"([^"]+)"/);
                const descMatch = response.match(
                  /"description":\s*"([^"]*?)"/s
                );
                const categoryMatch = response.match(/"category":\s*"([^"]+)"/);
                const techStackMatch = response.match(
                  /"techStack":\s*\[([^\]]+)\]/
                );
                const benefitsMatch = response.match(
                  /"benefits":\s*\[([^\]]+)\]/
                );
                const codeExampleMatch = response.match(
                  /"codeExample":\s*"(.*?)",?\s*"createdBy"/s
                );
                const estimatedTimeMatch = response.match(
                  /"estimatedTime":\s*"([^"]+)"/
                );
                const priorityMatch = response.match(/"priority":\s*"([^"]+)"/);

                if (titleMatch && descMatch && categoryMatch) {
                  // –ü–∞—Ä—Å–∏–º techStack
                  let techStack = ["React", "TypeScript"];
                  if (techStackMatch) {
                    try {
                      techStack = JSON.parse(`[${techStackMatch[1]}]`);
                    } catch {
                      // Fallback
                    }
                  }

                  // –ü–∞—Ä—Å–∏–º benefits
                  let benefits = ["AI generated feature"];
                  if (benefitsMatch) {
                    try {
                      benefits = JSON.parse(`[${benefitsMatch[1]}]`);
                    } catch {
                      // Fallback
                    }
                  }

                  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º codeExample
                  let codeExample =
                    "// AI generated code example for WHISP QUEST\n// Feature implementation here";
                  if (codeExampleMatch) {
                    codeExample = codeExampleMatch[1]
                      .replace(/\\n/g, "\n")
                      .replace(/\\t/g, "  ")
                      .replace(/\\"/g, '"')
                      .trim();
                  }

                  aiFeature = {
                    title: titleMatch[1],
                    description: descMatch[1],
                    category: categoryMatch[1] as
                      | "Frontend"
                      | "Backend"
                      | "AI/ML"
                      | "DevOps",
                    techStack: techStack,
                    benefits: benefits,
                    codeExample: codeExample,
                    estimatedTime: estimatedTimeMatch
                      ? estimatedTimeMatch[1]
                      : "2-3 –Ω–µ–¥–µ–ª–∏",
                    priority: (priorityMatch ? priorityMatch[1] : "High") as
                      | "Low"
                      | "Medium"
                      | "High",
                  };
                  console.log("Manually parsed feature:", aiFeature);
                } else {
                  throw new Error(
                    "Could not extract required fields from response"
                  );
                }
              } catch (manualParseError) {
                console.error("Manual parsing also failed:", manualParseError);
                throw parseError;
              }
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TechFeature
            const newFeature: TechFeature = {
              id: crypto.randomUUID(),
              title: aiFeature.title || `ü§ñ AI Generated Feature`,
              description:
                aiFeature.description || "AI generated feature for Whisp Quest",
              category:
                (aiFeature.category as
                  | "Frontend"
                  | "Backend"
                  | "AI/ML"
                  | "DevOps") || "Frontend",
              difficulty:
                (aiFeature.difficulty as
                  | "Junior"
                  | "Middle"
                  | "Senior"
                  | "Lead"
                  | "CTO") || "Middle",
              techStack: aiFeature.techStack || ["React", "TypeScript"],
              estimatedTime: aiFeature.estimatedTime || "1-2 –Ω–µ–¥–µ–ª–∏",
              priority:
                (aiFeature.priority as
                  | "Low"
                  | "Medium"
                  | "High"
                  | "Critical") || "Medium",
              benefits: aiFeature.benefits || ["AI enhanced functionality"],
              codeExample:
                aiFeature.codeExample || "// AI generated code example",
              createdBy: aiFeature.createdBy || "AI Neural Network üß†",
              createdAt: new Date().toISOString(),
              upvotes: aiFeature.upvotes || Math.floor(Math.random() * 10) + 1,
              status: "Proposed" as const,
            };

            set((state) => {
              console.log("Adding OpenAI feature to state");
              return {
                features: [newFeature, ...state.features],
                isGenerating: false,
              };
            });

            console.log("OpenAI feature generation completed successfully");
          } catch (openaiError) {
            console.warn(
              "OpenAI generation failed, using local fallback:",
              openaiError
            );

            // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É
            await new Promise((resolve) => setTimeout(resolve, 500));
            const newFeature = await generateAIGeniusFeature();
            console.log("Generated fallback feature:", newFeature);

            set((state) => {
              return {
                features: [newFeature, ...state.features],
                isGenerating: false,
              };
            });

            console.log("Fallback feature generation completed");
          }
        } catch (error) {
          console.error("Error generating features:", error);
          set({ isGenerating: false });
        }
      },

      clearFeatures: () => set({ features: [] }),

      resetGenerating: () => set({ isGenerating: false }),
    }),
    {
      name: "tech-features-storage",
      onRehydrateStorage: () => (state) => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å AI GENIUS —Ñ–∏—á–∞–º–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if (state && state.features.length === 0) {
          const initialFeatures = AI_GENIUS_FEATURES.map((feature) => ({
            ...feature,
            id: crypto.randomUUID(),
            createdBy: "AI GENIUS TECH ARCHITECT",
            createdAt: new Date().toISOString(),
          }));
          state.features = initialFeatures;
        }
      },
    }
  )
);

#!/bin/bash

# üê≥ Whisp Quest Docker Management Script

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    success "Docker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
check_env() {
    if [ ! -f .env ]; then
        warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
        cp .env.production .env
        warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à OPENAI_API_KEY –≤ —Ñ–∞–π–ª .env!"
    fi
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build() {
    info "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose build --no-cache
    success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã!"
}

# –ó–∞–ø—É—Å–∫ –≤ development —Ä–µ–∂–∏–º–µ
dev() {
    info "üöÄ –ó–∞–ø—É—Å–∫ –≤ development —Ä–µ–∂–∏–º–µ..."
    check_env
    docker-compose up --build
}

# –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ
start() {
    info "üöÄ –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ..."
    check_env
    docker-compose up -d --build
    success "Whisp Quest –∑–∞–ø—É—â–µ–Ω! –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop() {
    info "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose down
    success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã + –æ–±—Ä–∞–∑—ã + —Ç–æ–º–∞)
clean() {
    warning "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã –∏ —Ç–æ–º–∞! (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker-compose down -v --rmi all --remove-orphans
        docker system prune -af
        success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else
        info "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    fi
}

# –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
logs() {
    service=${1:-""}
    if [ -z "$service" ]; then
        info "üìã –ü–æ–∫–∞–∑—ã–≤–∞—é –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose logs -f
    else
        info "üìã –ü–æ–∫–∞–∑—ã–≤–∞—é –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞: $service"
        docker-compose logs -f "$service"
    fi
}

# –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
status() {
    info "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose ps
    echo
    info "üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    docker stats --no-stream
}

# –í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
shell() {
    service=${1:-"whisp-server"}
    info "üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É: $service"
    docker-compose exec "$service" sh
}

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
restart() {
    service=${1:-""}
    if [ -z "$service" ]; then
        info "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose restart
    else
        info "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: $service"
        docker-compose restart "$service"
    fi
    success "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
help() {
    echo "üê≥ Whisp Quest Docker Management"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  build          –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑—ã"
    echo "  dev            –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ development —Ä–µ–∂–∏–º–µ"
    echo "  start          –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ production —Ä–µ–∂–∏–º–µ"
    echo "  stop           –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    echo "  restart [—Å–µ—Ä–≤–∏—Å] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–∏—Å(—ã)"
    echo "  status         –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  logs [—Å–µ—Ä–≤–∏—Å]  –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  shell [—Å–µ—Ä–≤–∏—Å] –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: whisp-server)"
    echo "  clean          –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
    echo "  help           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–°–µ—Ä–≤–∏—Å—ã: whisp-frontend, whisp-server"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    check_docker
    
    case "${1:-help}" in
        "build")
            build
            ;;
        "dev")
            dev
            ;;
        "start")
            start
            ;;
        "stop")
            stop
            ;;
        "restart")
            restart "$2"
            ;;
        "status")
            status
            ;;
        "logs")
            logs "$2"
            ;;
        "shell")
            shell "$2"
            ;;
        "clean")
            clean
            ;;
        "help"|"--help"|"-h")
            help
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            help
            exit 1
            ;;
    esac
}

main "$@"
